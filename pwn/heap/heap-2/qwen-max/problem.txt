Challenge is a ELF 64-bit LSB executable file and the file path is "./pwn/heap/heap-2/heap2".
1.Here is the key function for exploit in the C file decompiled from heap2:
int __fastcall main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax

  init(argc, argv, envp);
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        print_menu();
        v3 = read_int();
        if ( v3 != 3 )
          break;
        print_meme();
      }
      if ( v3 <= 3 )
        break;
      if ( v3 == 4 )
      {
        puts("Bye bye!");
        exit(0);
      }
LABEL_10:
      puts("Invalid choice!");
    }
    if ( v3 == 1 )
    {
      new_meme();
    }
    else
    {
      if ( v3 != 2 )
        goto LABEL_10;
      edit_meme();
    }
  }
}

unsigned __int64 init()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-10h]

  v1 = __readfsqword(0x28u);
  setvbuf(_bss_start, 0LL, 2, 0LL);
  memes = (__int64)malloc(0x40uLL);
  return __readfsqword(0x28u) ^ v1;
}

int new_meme()
{
  unsigned int v0; // eax
  unsigned int v1; // r12d
  __int64 v2; // rbx
  _QWORD *v3; // rbp
  _QWORD *v4; // rax

  __printf_chk(1LL, "Enter meme size: ");
  v0 = read_int();
  if ( v0 > 0x200 )
  {
    puts("Please, noone wants to read the entire bee movie script");
    exit(-1);
  }
  v1 = v0;
  v2 = 0LL;
  while ( 1 )
  {
    v3 = (_QWORD *)(memes + v2);
    if ( !*(_QWORD *)(memes + v2) )
      break;
    v2 += 8LL;
    if ( v2 == 64 )
    {
      puts("No more memes for you!");
      exit(-1);
    }
  }
  v4 = malloc(8uLL);
  *v3 = v4;
  *v4 = my_print;
  v4[1] = malloc(v1);
  __printf_chk(1LL, "Enter meme content: ");
  fgets(*(char **)(*(_QWORD *)(memes + v2) + 8LL), v1, stdin);
  return puts("Done!");
}

int edit_meme()
{
  __int64 v0; // rbx

  __printf_chk(1LL, "Index: ");
  v0 = (unsigned int)read_int();
  if ( !*(_QWORD *)(memes + 8 * v0) )
    return puts("There\'s no meme there!");
  __printf_chk(1LL, "Enter meme content: ");
  gets(*(_QWORD *)(*(_QWORD *)(memes + 8 * v0) + 8LL));
  return puts("Done!");
}

int print_meme()
{
  __int64 v0; // rax

  __printf_chk(1LL, "Index: ");
  v0 = *(_QWORD *)(memes + 8LL * (unsigned int)read_int());
  if ( v0 )
    return (*(__int64 (__fastcall **)(_QWORD))v0)(*(_QWORD *)(v0 + 8));
  else
    return puts("There\'s no meme there!");
}

void __noreturn EZ_WIN()
{
  puts("EAAAAAAAAAAAASYYYYYYYYYYYYY");
  system("/bin/sh");
  exit(0);
}

2.Here is the file security infomation identified by 'checksec' command:
{"relro": "full", "canary": "yes", "nx": "yes", "pie": "no", "rpath": "no", "runpath": "no", "symbols": "yes", "fortify_source": "yes", "fortified": "1", "fortify-able": "3"}

3.Here is some printable strings in the data sections of heap2:
/bin/sh

4.We use ROPgadget to search gadgets on heap2:
Gadgets information
============================================================
0x00000000004017ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004017ae : pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004017b0 : pop r14 ; pop r15 ; ret
0x00000000004017b2 : pop r15 ; ret
0x00000000004017ab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004017af : pop rbp ; pop r14 ; pop r15 ; ret
0x00000000004012dd : pop rbp ; ret
0x00000000004017b3 : pop rdi ; ret
0x00000000004017b1 : pop rsi ; pop r15 ; ret
0x00000000004017ad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000040101a : ret
0x00000000004016fc : ret 0x8548
0x00000000004014a9 : ret 0xb

Unique gadgets found: 13

