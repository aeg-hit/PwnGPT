Challenge is a ELF 64-bit LSB executable file and the file path is "./pwn/string/fmt-3/fmt3".
1.Here is the key function for exploit in the C file decompiled from fmt3:
//----- (00000000004008A6) ----------------------------------------------------
int sub_4008A6()
{
  return system("/bin/sh");
}

//----- (0000000000400903) ----------------------------------------------------
_QWORD *__fastcall sub_400903(
        _QWORD *a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        __int64 buf,
        __int64 a8,
        __int64 a9,
        __int64 a10,
        __int64 a11)
{
  unsigned __int8 v12; // [rsp+1Fh] [rbp-1h]

  puts("Register Account first!");
  puts("Input your username(max lenth:20): ");
  fflush(stdout);
  v12 = read(0, &buf, 0x14uLL);
  if ( v12 && v12 <= 0x14u )
  {
    puts("Input your password(max lenth:20): ");
    fflush(stdout);
    read(0, (char *)&a9 + 4, 0x14uLL);
    fflush(stdout);
    *a1 = buf;
    a1[1] = a8;
    a1[2] = a9;
    a1[3] = a10;
    a1[4] = a11;
  }
  else
  {
    LOBYTE(buf) = 48;
    puts("error lenth(username)!try again");
    fflush(stdout);
    *a1 = buf;
    a1[1] = a8;
    a1[2] = a9;
    a1[3] = a10;
    a1[4] = a11;
  }
  return a1;
}

//----- (0000000000400A75) ----------------------------------------------------
__int64 sub_400A75()
{
  int buf; // [rsp+8h] [rbp-8h] BYREF

  buf = 0;
  puts("1.Sh0w Account Infomation!");
  puts("2.Ed1t Account Inf0mation!");
  puts("3.QUit sangebaimao:(");
  putchar(62);
  fflush(stdout);
  read(0, &buf, 5uLL);
  return (unsigned int)atol((const char *)&buf);
}

//----- (0000000000400B41) ----------------------------------------------------
__int64 __fastcall sub_400B41(
        __int64 a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        __int64 s,
        __int64 a8,
        __int128 dest,
        __int64 a10)
{
  char buf[304]; // [rsp+10h] [rbp-260h] BYREF
  char src[302]; // [rsp+140h] [rbp-130h] BYREF
  unsigned __int8 v13; // [rsp+26Eh] [rbp-2h]
  char v14; // [rsp+26Fh] [rbp-1h]

  puts("please input new username(max lenth:20): ");
  fflush(stdout);
  v14 = read(0, buf, 0x12CuLL);
  if ( v14 <= 0 || v14 > 20 )
  {
    puts("len error(max lenth:20)!try again..\n");
    fflush(stdout);
    *(_QWORD *)a1 = s;
    *(_QWORD *)(a1 + 8) = a8;
    *(_OWORD *)(a1 + 16) = dest;
    *(_QWORD *)(a1 + 32) = a10;
  }
  else
  {
    memset(&s, 0, 0x14uLL);
    strcpy((char *)&s, buf);
    puts("please input new password(max lenth:20): ");
    fflush(stdout);
    v13 = read(0, src, 0x12CuLL);
    if ( v13 && v13 <= 0x14u )
    {
      memset((char *)&dest + 4, 0, 0x14uLL);
      sub_400AE5(src);
      memcpy((char *)&dest + 4, src, v13);
      fflush(stdout);
      *(_QWORD *)a1 = s;
      *(_QWORD *)(a1 + 8) = a8;
      *(_OWORD *)(a1 + 16) = dest;
      *(_QWORD *)(a1 + 32) = a10;
    }
    else
    {
      puts("len error(max lenth:10)!try again..\n");
      fflush(stdout);
      *(_QWORD *)a1 = s;
      *(_QWORD *)(a1 + 8) = a8;
      *(_OWORD *)(a1 + 16) = dest;
      *(_QWORD *)(a1 + 32) = a10;
    }
  }
  return a1;
}

//----- (0000000000400D2B) ----------------------------------------------------
int __fastcall sub_400D2B(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        __int64 format,
        __int64 a8,
        __int128 dest,
        __int64 a10)
{
  int v10; // edi
  int v11; // eax
  int v12; // edx
  int v13; // ecx
  int v14; // r8d
  int v15; // r9d

  v10 = (int)stdin;
  setbuf(stdin, 0LL);
  while ( 1 )
  {
    v11 = sub_400A75();
    switch ( v11 )
    {
      case 2:
        sub_400B41((__int64)&format, 0, v12, v13, v14, v15, format, a8, dest, a10);
        break;
      case 3:
        return sub_400D1A();
      case 1:
        sub_400B07(v10, 0, v12, v13, v14, v15, format, a8, dest);
        break;
      default:
        puts("error options");
        fflush(stdout);
        break;
    }
    v10 = (int)stdout;
    fflush(stdout);
  }
}

//----- (0000000000400DD8) ----------------------------------------------------
__int64 __fastcall main(int a1, char **a2, char **a3)
{
  int v3; // edx
  int v4; // ecx
  int v5; // r8d
  int v6; // r9d
  int v7; // edi
  int v8; // edx
  int v9; // ecx
  int v10; // r8d
  int v11; // r9d
  char format[8]; // [rsp+10h] [rbp-60h] BYREF
  __int64 v14; // [rsp+18h] [rbp-58h]
  __int128 dest; // [rsp+20h] [rbp-50h]
  __int64 v16; // [rsp+30h] [rbp-40h]
  __int64 buf; // [rsp+40h] [rbp-30h]
  __int64 v18; // [rsp+48h] [rbp-28h]
  __int64 v19[3]; // [rsp+50h] [rbp-20h]

  buf = 48LL;
  v18 = 0LL;
  LODWORD(v19[0]) = 0;
  *(__int64 *)((char *)v19 + 4) = 48LL;
  *(__int64 *)((char *)&v19[1] + 4) = 0LL;
  HIDWORD(v19[2]) = 0;
  sub_4008BB();
  while ( 1 )
  {
    sub_400903(format, (int)a2, v3, v4, v5, v6, buf, v18, v19[0], v19[1], v19[2]);
    if ( format[0] != 48 )
      break;
    puts("Register failure,try again...");
    fflush(stdout);
  }
  puts("Register Success!!");
  v7 = (int)stdout;
  fflush(stdout);
  sub_400D2B(v7, (int)a2, v8, v9, v10, v11, *(__int64 *)format, v14, dest, v16);
  return 0LL;
}


2.Here is the file security infomation identified by 'checksec' command:
{"relro": "full", "canary": "no", "nx": "yes", "pie": "no", "rpath": "no", "runpath": "no", "symbols": "no", "fortify_source": "no", "fortified": "0", "fortify-able": "5"}

3.Here is some printable strings in the data sections of fmt3:
/bin/sh

4.We use ROPgadget to search gadgets on fmt3:
Gadgets information
============================================================
0x0000000000400f0c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000400f0e : pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000400f10 : pop r14 ; pop r15 ; ret
0x0000000000400f12 : pop r15 ; ret
0x0000000000400f0b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000400f0f : pop rbp ; pop r14 ; pop r15 ; ret
0x0000000000400810 : pop rbp ; ret
0x00000000004008b4 : pop rdi ; pop rsi ; pop rdx ; ret
0x0000000000400f13 : pop rdi ; ret
0x00000000004008b6 : pop rdx ; ret
0x0000000000400f11 : pop rsi ; pop r15 ; ret
0x00000000004008b5 : pop rsi ; pop rdx ; ret
0x0000000000400f0d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000400296 : ret
0x0000000000400a8a : ret 0xfffc

Unique gadgets found: 15

