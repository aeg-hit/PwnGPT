Challenge is a ELF 32-bit LSB executable file and the file path is "./pwn/string/fmt-1/fmt1".
1.Here is the key function for exploit in the C file decompiled from fmt1:
int be_nice_to_people()
{
  __gid_t v1; // [esp+1Ch] [ebp-Ch]

  v1 = getegid();
  return setresgid(v1, v1, v1);
}

void (*init_proc())(void)
{
  if ( &_gmon_start__ )
    __gmon_start__();
  frame_dummy();
  return _do_global_ctors_aux();
}

void (*_do_global_ctors_aux())(void)
{
  void (*result)(void); // eax
  void (**v1)(void); // ebx

  result = (void (*)(void))_CTOR_LIST__;
  if ( _CTOR_LIST__ != -1 )
  {
    v1 = (void (**)(void))&_CTOR_LIST__;
    do
    {
      --v1;
      result();
      result = *v1;
    }
    while ( *v1 != (void (*)(void))-1 );
  }
  return result;
}

void term_proc()
{
  _do_global_dtors_aux();
}

void __cdecl _libc_csu_init(int a1, int a2, int a3)
{
  int v3; // edi
  int i; // esi

  init_proc();
  v3 = (134520820 - (int)&GLOBAL_OFFSET_TABLE_) >> 2;
  if ( v3 )
  {
    for ( i = 0; i != v3; ++i )
      ((void (__cdecl *)(int, int, int))_CTOR_LIST__[i])(a1, a2, a3);
  }
}

int sub_80483D0()
{
  return dword_8049FFC();
}

int __cdecl main(int argc, const char **argv, const char **envp)
{
  char buf[80]; // [esp+2Ch] [ebp-5Ch] BYREF
  unsigned int v5; // [esp+7Ch] [ebp-Ch]

  v5 = __readgsdword(0x14u);
  be_nice_to_people();
  memset(buf, 0, sizeof(buf));
  read(0, buf, 0x50u);
  printf(buf);
  printf("%d!\n", x);
  if ( x == 4 )
  {
    puts("running sh...");
    system("/bin/sh");
  }
  return 0;
}

2.Here is the file security infomation identified by 'checksec' command:
{"relro": "partial", "canary": "yes", "nx": "yes", "pie": "no", "rpath": "no", "runpath": "no", "symbols": "yes", "fortify_source": "no", "fortified": "0", "fortify-able": "2"}

3.Here is some printable strings in the data sections of fmt1:
/bin/sh

4.We use ROPgadget to search gadgets on fmt1:
Gadgets information
============================================================
0x080484f3 : pop ebp ; ret
0x080484f2 : pop ebx ; pop ebp ; ret
0x08048605 : pop ebx ; pop edi ; pop ebp ; ret
0x0804866c : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080483c8 : pop ebx ; ret
0x08048606 : pop edi ; pop ebp ; ret
0x0804866d : pop esi ; pop edi ; pop ebp ; ret
0x080483a7 : ret

Unique gadgets found: 8

5.Here is information of the file's relocation section:
Relocation section '.rel.plt' at offset 0x354 contains 9 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
0804a000  00000107 R_386_JUMP_SLOT   00000000   read@GLIBC_2.0
0804a004  00000207 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0
0804a008  00000307 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4
0804a00c  00000407 R_386_JUMP_SLOT   00000000   getegid@GLIBC_2.0
0804a010  00000507 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0
0804a014  00000607 R_386_JUMP_SLOT   00000000   system@GLIBC_2.0
0804a018  00000707 R_386_JUMP_SLOT   00000000   __gmon_start__
0804a01c  00000807 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0
0804a020  00000907 R_386_JUMP_SLOT   00000000   setresgid@GLIBC_2.0

