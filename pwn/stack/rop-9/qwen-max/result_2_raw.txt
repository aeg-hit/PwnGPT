('//----- (08048A20) --------------------------------------------------------\n'
 'int __cdecl main(int argc, const char **argv, const char **envp)\n'
 '{\n'
 '  long double v3; // fst7\n'
 '  char v5[56]; // [esp+4h] [ebp-38h] BYREF\n'
 '\n'
 '  printf(v3, (unsigned int)"Qual a palavrinha magica? ");\n'
 '  gets(v5);\n'
 '  return 0;\n'
 '}\n'
 '\n'
 '//----- (0804F630) --------------------------------------------------------\n'
 '_BYTE *__cdecl gets(_BYTE *a1)\n'
 '{\n'
 '  _DWORD *v1; // esi\n'
 '  _BYTE *v2; // ebx\n'
 '  int *v3; // ecx\n'
 '  unsigned int v5; // edi\n'
 '  bool v7; // zf\n'
 '  unsigned __int8 *v8; // eax\n'
 '  int v9; // eax\n'
 '  char v10; // di\n'
 '  int v11; // edi\n'
 '  _BYTE *v12; // eax\n'
 '  _DWORD *v13; // edx\n'
 '\n'
 '  v1 = stdin;\n'
 '  v2 = a1;\n'
 '  v3 = (int *)stdin;\n'
 '  if ( (*(_DWORD *)stdin & 0x8000) == 0 )\n'
 '  {\n'
 '    _EDX = *((_DWORD *)stdin + 18);\n'
 '    v5 = __readgsdword(8u);\n'
 '    if ( v5 == *(_DWORD *)(_EDX + 8) )\n'
 '    {\n'
 '      v3 = (int *)stdin;\n'
 '    }\n'
 '    else\n'
 '    {\n'
 '      _ECX = 1;\n'
 '      v7 = __readgsdword(0xCu) == 0;\n'
 '      if ( !v7 )\n'
 '        __asm { lock }\n'
 '      __asm { cmpxchg [edx], ecx }\n'
 '      if ( !v7 )\n'
 '        _lll_lock_wait_private(0, (volatile __int32 *)_EDX);\n'
 '      _EDX = v1[18];\n'
 '      v3 = (int *)stdin;\n'
 '      *(_DWORD *)(_EDX + 8) = v5;\n'
 '    }\n'
 '    ++*(_DWORD *)(_EDX + 4);\n'
 '  }\n'
 '  v8 = (unsigned __int8 *)v3[1];\n'
 '  if ( (unsigned int)v8 >= v3[2] )\n'
 '  {\n'
 '    v9 = _uflow(v3);\n'
 '    if ( v9 == -1 )\n'
 '      goto LABEL_25;\n'
 '  }\n'
 '  else\n'
 '  {\n'
 '    v3[1] = (int)(v8 + 1);\n'
 '    v9 = *v8;\n'
 '  }\n'
 '  if ( v9 == 10 )\n'
 '  {\n'
 '    v12 = 0;\n'
 '    goto LABEL_14;\n'
 '  }\n'
 '  v10 = *(_DWORD *)stdin;\n'
 '  *(_DWORD *)stdin &= ~0x20u;\n'
 '  *a1 = v9;\n'
 '  v11 = v10 & 0x20;\n'
 '  v12 = IO_getline((int *)stdin, a1 + 1, 0x7FFFFFFFu, 10, 0) + 1;\n'
 '  if ( (*(_DWORD *)stdin & 0x20) != 0 )\n'
 '  {\n'
 'LABEL_25:\n'
 '    v2 = 0;\n'
 '    goto LABEL_15;\n'
 '  }\n'
 '  *(_DWORD *)stdin |= v11;\n'
 'LABEL_14:\n'
 '  v12[(_DWORD)a1] = 0;\n'
 'LABEL_15:\n'
 '  if ( (*v1 & 0x8000) == 0 )\n'
 '  {\n'
 '    v13 = (_DWORD *)v1[18];\n'
 '    v7 = v13[1]-- == 1;\n'
 '    if ( v7 )\n'
 '    {\n'
 '      v13[2] = 0;\n'
 '      if ( __readgsdword(0xCu) )\n'
 '        __asm { lock }\n'
 '      v7 = (*v13)-- == 1;\n'
 '      if ( !v7 )\n'
 '        _lll_unlock_wake_private(v13);\n'
 '    }\n'
 '  }\n'
 '  return v2;\n'
 '}\n'
 '\n'
 '//----- (08054670) --------------------------------------------------------\n'
 'int __cdecl _uflow(int *a1)\n'
 '{\n'
 '  int v1; // eax\n'
 '  unsigned __int8 *v2; // eax\n'
 '  unsigned int v3; // edx\n'
 '  int v4; // eax\n'
 '  int v5; // esi\n'
 '  unsigned int v7; // ecx\n'
 '  int v8; // edx\n'
 '  int v9; // edx\n'
 '\n'
 '  v1 = a1[26];\n'
 '  if ( v1 )\n'
 '  {\n'
 '    if ( v1 != -1 )\n'
 '      return -1;\n'
 '  }\n'
 '  else\n'
 '  {\n'
 '    a1[26] = -1;\n'
 '  }\n'
 '  if ( (*a1 & 0x800) != 0 && IO_switch_to_get_mode(a1) == -1 )\n'
 '    return -1;\n'
 '  v2 = (unsigned __int8 *)a1[1];\n'
 '  v3 = a1[2];\n'
 '  if ( (unsigned int)v2 < v3 )\n'
 '    goto LABEL_17;\n'
 '  v4 = *a1;\n'
 '  if ( (*a1 & 0x100) == 0 )\n'
 '  {\n'
 '    if ( a1[12] )\n'
 '      goto LABEL_7;\n'
 'LABEL_15:\n'
 '    if ( a1[9] )\n'
 '      IO_free_backup_area(a1);\n'
 '    goto LABEL_8;\n'
 '  }\n'
 '  BYTE1(v4) &= ~1u;\n'
 '  v7 = a1[11];\n'
 '  a1[11] = v3;\n'
 '  *a1 = v4;\n'
 '  v2 = (unsigned __int8 *)a1[9];\n'
 '  v8 = a1[3];\n'
 '  a1[2] = v7;\n'
 '  a1[3] = (int)v2;\n'
 '  a1[9] = v8;\n'
 '  if ( v7 > (unsigned int)v2 )\n'
 '  {\n'
 'LABEL_17:\n'
 '    a1[1] = (int)(v2 + 1);\n'
 '    return *v2;\n'
 '  }\n'
 '  v9 = a1[12];\n'
 '  a1[1] = (int)v2;\n'
 '  if ( !v9 )\n'
 '    goto LABEL_15;\n'
 'LABEL_7:\n'
 '  if ( save_for_backup(a1, a1[2]) )\n'
 '    return -1;\n'
 'LABEL_8:\n'
 '  v5 = a1[37];\n'
 '  if ( (char *)_start___libc_atexit - (char *)&_start___libc_IO_vtables <= '
 '(unsigned int)(v5\n'
 '                                                                                        '
 '- (_DWORD)&_start___libc_IO_vtables) )\n'
 '    IO_vtable_check();\n'
 '  return (*(int (__cdecl **)(int *))(v5 + 20))(a1);\n'
 '}\n'
 '\n'
 '//----- (0808BF90) --------------------------------------------------------\n'
 '_BYTE *__cdecl IO_getline(int *a1, _BYTE *a2, unsigned int a3, int a4, int '
 'a5)\n'
 '{\n'
 '  return IO_getline_info(a1, a2, a3, a4, a5, 0);\n'
 '}\n'
 '\n'
 '//----- (080489A0) --------------------------------------------------------\n'
 'void __cdecl get_flag(int a1, int a2)\n'
 '{\n'
 '  int v2; // esi\n'
 '  unsigned __int8 v3; // al\n'
 '  int v4; // ecx\n'
 '  unsigned __int8 v5; // al\n'
 '\n'
 '  if ( a1 == 814536271 && a2 == 425138641 )\n'
 '  {\n'
 '    v2 = fopen("flag.txt", "rt");\n'
 '    v3 = getc(v2);\n'
 '    if ( v3 != 255 )\n'
 '    {\n'
 '      v4 = (char)v3;\n'
 '      do\n'
 '      {\n'
 '        putchar(v4);\n'
 '        v5 = getc(v2);\n'
 '        v4 = (char)v5;\n'
 '      }\n'
 '      while ( v5 != 255 );\n'
 '    }\n'
 '    fclose(v2);\n'
 '  }\n'
 '}\n'
 '\n'
 '//----- (08058FF0) --------------------------------------------------------\n'
 'int __cdecl malloc_check(unsigned int a1)\n'
 '{\n'
 '  bool v2; // zf\n'
 '  int v3; // eax\n'
 '  int v4; // ecx\n'
 '\n'
 '  if ( a1 == -1 )\n'
 '  {\n'
 '    __writegsdword(0xFFFFFFE8, 0xCu);\n'
 '    return 0;\n'
 '  }\n'
 '  else\n'
 '  {\n'
 '    _ECX = 1;\n'
 '    v2 = __readgsdword(0xCu) == 0;\n'
 '    if ( !v2 )\n'
 '      __asm { lock }\n'
 '    __asm { cmpxchg main_arena, ecx }\n'
 '    if ( !v2 )\n'
 '      _lll_lock_wait_private(0, &main_arena);\n'
 '    v3 = top_check();\n'
 '    v4 = 0;\n'
 '    if ( v3 >= 0 )\n'
 '      v4 = int_malloc(&main_arena, a1 + 1);\n'
 '    if ( __readgsdword(0xCu) )\n'
 '      __asm { lock }\n'
 '    if ( --main_arena )\n'
 '      _lll_unlock_wake_private(&main_arena);\n'
 '    return mem2mem_check(v4, a1);\n'
 '  }\n'
 '}\n'
 '\n'
 '//----- (080591C0) --------------------------------------------------------\n'
 'void __cdecl free_check(unsigned int a1)\n'
 '{\n'
 '  bool v2; // zf\n'
 '  unsigned int v3; // eax\n'
 '  int v4; // ecx\n'
 '  unsigned int v5; // edx\n'
 '\n'
 '  if ( a1 )\n'
 '  {\n'
 '    _ECX = 1;\n'
 '    v2 = __readgsdword(0xCu) == 0;\n'
 '    if ( !v2 )\n'
 '      __asm { lock }\n'
 '    __asm { cmpxchg main_arena, ecx }\n'
 '    if ( !v2 )\n'
 '      _lll_lock_wait_private(0, &main_arena);\n'
 '    v3 = mem2chunk_check(a1, 0);\n'
 '    v5 = v3;\n'
 '    if ( v3 )\n'
 '    {\n'
 '      if ( (*(_BYTE *)(v3 + 4) & 2) != 0 )\n'
 '      {\n'
 '        if ( __readgsdword(0xCu) )\n'
 '          __asm { lock }\n'
 '        if ( --main_arena )\n'
 '          _lll_unlock_wake_private(&main_arena);\n'
 '        munmap_chunk(v4, v5);\n'
 '      }\n'
 '      else\n'
 '      {\n'
 '        int_free((int)&main_arena, v3, 1);\n'
 '        if ( __readgsdword(0xCu) )\n'
 '          __asm { lock }\n'
 '        if ( --main_arena )\n'
 '          _lll_unlock_wake_private(&main_arena);\n'
 '      }\n'
 '    }\n'
 '    else\n'
 '    {\n'
 '      if ( __readgsdword(0xCu) )\n'
 '        __asm { lock }\n'
 '      if ( --main_arena )\n'
 '        _lll_unlock_wake_private(&main_arena);\n'
 '      malloc_printerr(check_action, "free(): invalid pointer", a1, '
 '(int)&main_arena);\n'
 '    }\n'
 '  }\n'
 '}\n'
 '\n'
 '//----- (08059680) --------------------------------------------------------\n'
 'int __cdecl realloc_check(_BYTE *a1, unsigned int a2)\n'
 '{\n'
 '  int v2; // esi\n'
 '  bool v4; // zf\n'
 '  int *v5; // ebp\n'
 '  unsigned int v7; // eax\n'
 '  int v8; // edx\n'
 '  bool v9; // zf\n'
 '  int *v10; // eax\n'
 '  _BYTE *v12; // ebx\n'
 '  int v13; // edx\n'
 '  int v14; // ecx\n'
 '  unsigned int v15; // [esp+4h] [ebp-38h]\n'
 '  unsigned int v16; // [esp+8h] [ebp-34h]\n'
 '  char *v17; // [esp+1Ch] [ebp-20h] BYREF\n'
 '\n'
 '  v2 = (int)a1;\n'
 '  if ( a2 == -1 )\n'
 '    goto LABEL_32;\n'
 '  if ( !a1 )\n'
 '    return malloc_check(a2);\n'
 '  if ( !a2 )\n'
 '  {\n'
 '    free_check((unsigned int)a1);\n'
 '    return 0;\n'
 '  }\n'
 '  _ECX = 1;\n'
 '  v4 = __readgsdword(0xCu) == 0;\n'
 '  if ( !v4 )\n'
 '    __asm { lock }\n'
 '  __asm { cmpxchg main_arena, ecx }\n'
 '  if ( !v4 )\n'
 '    _lll_lock_wait_private(0, &main_arena);\n'
 '  v5 = (int *)mem2chunk_check((int)a1, &v17);\n'
 '  if ( __readgsdword(0xCu) )\n'
 '    __asm { lock }\n'
 '  if ( --main_arena )\n'
 '    _lll_unlock_wake_private(&main_arena);\n'
 '  if ( !v5 )\n'
 '  {\n'
 '    malloc_printerr(check_action, "realloc(): invalid pointer", (unsigned '
 'int)a1, (int)&main_arena);\n'
 '    return malloc_check(a2);\n'
 '  }\n'
 '  v15 = v5[1] & 0xFFFFFFF8;\n'
 '  if ( a2 + 1 > 0xFFFFFFDF )\n'
 '  {\n'
 'LABEL_32:\n'
 '    __writegsdword(0xFFFFFFE8, 0xCu);\n'
 '    return 0;\n'
 '  }\n'
 '  _ECX = 1;\n'
 '  v7 = 16;\n'
 '  if ( a2 + 12 >= 0x10 )\n'
 '    v7 = (a2 + 12) & 0xFFFFFFF8;\n'
 '  v8 = v7;\n'
 '  v16 = v7;\n'
 '  v9 = __readgsdword(0xCu) == 0;\n'
 '  if ( !v9 )\n'
 '    __asm { lock }\n'
 '  __asm { cmpxchg main_arena, ecx }\n'
 '  if ( !v9 )\n'
 '    _lll_lock_wait_private(0, &main_arena);\n'
 '  if ( (v5[1] & 2) != 0 )\n'
 '  {\n'
 '    v10 = mremap_chunk(v5, v8);\n'
 '    if ( !v10 )\n'
 '    {\n'
 '      if ( v16 <= v15 - 4 )\n'
 '        goto LABEL_24;\n'
 '      if ( top_check() >= 0 )\n'
 '      {\n'
 '        v12 = (_BYTE *)int_malloc(&main_arena, a2 + 1);\n'
 '        if ( v12 )\n'
 '        {\n'
 '          v2 = (int)v12;\n'
 '          memcpy(v12, a1, v15 - 8);\n'
 '          munmap_chunk(v14, v13);\n'
 '          goto LABEL_24;\n'
 '        }\n'
 '      }\n'
 '      goto LABEL_31;\n'
 '    }\n'
 '    v2 = (int)(v10 + 2);\n'
 '  }\n'
 '  else\n'
 '  {\n'
 '    if ( top_check() < 0 )\n'
 '      goto LABEL_31;\n'
 '    v2 = int_realloc(&main_arena, (unsigned int)v5, v15, v16);\n'
 '  }\n'
 '  if ( !v2 )\n'
 '  {\n'
 'LABEL_31:\n'
 '    v2 = 0;\n'
 '    *v17 = ~*v17;\n'
 '  }\n'
 'LABEL_24:\n'
 '  if ( __readgsdword(0xCu) )\n'
 '    __asm { lock }\n'
 '  if ( --main_arena )\n'
 '    _lll_unlock_wake_private(&main_arena);\n'
 '  return mem2mem_check(v2, a2);\n'
 '}\n'
 '\n'
 '// positive sp value has been detected, the output may be wrong!\n'
 'void __usercall __noreturn start(int a1@<eax>, void (*a2)(void)@<edx>)\n'
 '{\n'
 '  int v2; // esi\n'
 '  int v3; // [esp-4h] [ebp-4h] BYREF\n'
 '  char *retaddr; // [esp+0h] [ebp+0h] BYREF\n'
 '\n'
 '  v2 = v3;\n'
 '  v3 = a1;\n'
 '  _libc_start_main((int (__cdecl *)(int, char **, char **))main, v2, '
 '&retaddr, _libc_csu_init, _libc_csu_fini, a2, &v3);\n'
 '}\n'
 '\n')
