Challenge is a ELF 32-bit LSB executable file and the file path is "./pwn/stack/rop-9/rop9".
1.Here is the key function for exploit in the C file decompiled from rop9:
//----- (08048A20) --------------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  long double v3; // fst7
  char v5[56]; // [esp+4h] [ebp-38h] BYREF

  printf(v3, (unsigned int)"Qual a palavrinha magica? ");
  gets(v5);
  return 0;
}

//----- (0804F630) --------------------------------------------------------
_BYTE *__cdecl gets(_BYTE *a1)
{
  _DWORD *v1; // esi
  _BYTE *v2; // ebx
  int *v3; // ecx
  unsigned int v5; // edi
  bool v7; // zf
  unsigned __int8 *v8; // eax
  int v9; // eax
  char v10; // di
  int v11; // edi
  _BYTE *v12; // eax
  _DWORD *v13; // edx

  v1 = stdin;
  v2 = a1;
  v3 = (int *)stdin;
  if ( (*(_DWORD *)stdin & 0x8000) == 0 )
  {
    _EDX = *((_DWORD *)stdin + 18);
    v5 = __readgsdword(8u);
    if ( v5 == *(_DWORD *)(_EDX + 8) )
    {
      v3 = (int *)stdin;
    }
    else
    {
      _ECX = 1;
      v7 = __readgsdword(0xCu) == 0;
      if ( !v7 )
        __asm { lock }
      __asm { cmpxchg [edx], ecx }
      if ( !v7 )
        _lll_lock_wait_private(0, (volatile __int32 *)_EDX);
      _EDX = v1[18];
      v3 = (int *)stdin;
      *(_DWORD *)(_EDX + 8) = v5;
    }
    ++*(_DWORD *)(_EDX + 4);
  }
  v8 = (unsigned __int8 *)v3[1];
  if ( (unsigned int)v8 >= v3[2] )
  {
    v9 = _uflow(v3);
    if ( v9 == -1 )
      goto LABEL_25;
  }
  else
  {
    v3[1] = (int)(v8 + 1);
    v9 = *v8;
  }
  if ( v9 == 10 )
  {
    v12 = 0;
    goto LABEL_14;
  }
  v10 = *(_DWORD *)stdin;
  *(_DWORD *)stdin &= ~0x20u;
  *a1 = v9;
  v11 = v10 & 0x20;
  v12 = IO_getline((int *)stdin, a1 + 1, 0x7FFFFFFFu, 10, 0) + 1;
  if ( (*(_DWORD *)stdin & 0x20) != 0 )
  {
LABEL_25:
    v2 = 0;
    goto LABEL_15;
  }
  *(_DWORD *)stdin |= v11;
LABEL_14:
  v12[(_DWORD)a1] = 0;
LABEL_15:
  if ( (*v1 & 0x8000) == 0 )
  {
    v13 = (_DWORD *)v1[18];
    v7 = v13[1]-- == 1;
    if ( v7 )
    {
      v13[2] = 0;
      if ( __readgsdword(0xCu) )
        __asm { lock }
      v7 = (*v13)-- == 1;
      if ( !v7 )
        _lll_unlock_wake_private(v13);
    }
  }
  return v2;
}

//----- (08054670) --------------------------------------------------------
int __cdecl _uflow(int *a1)
{
  int v1; // eax
  unsigned __int8 *v2; // eax
  unsigned int v3; // edx
  int v4; // eax
  int v5; // esi
  unsigned int v7; // ecx
  int v8; // edx
  int v9; // edx

  v1 = a1[26];
  if ( v1 )
  {
    if ( v1 != -1 )
      return -1;
  }
  else
  {
    a1[26] = -1;
  }
  if ( (*a1 & 0x800) != 0 && IO_switch_to_get_mode(a1) == -1 )
    return -1;
  v2 = (unsigned __int8 *)a1[1];
  v3 = a1[2];
  if ( (unsigned int)v2 < v3 )
    goto LABEL_17;
  v4 = *a1;
  if ( (*a1 & 0x100) == 0 )
  {
    if ( a1[12] )
      goto LABEL_7;
LABEL_15:
    if ( a1[9] )
      IO_free_backup_area(a1);
    goto LABEL_8;
  }
  BYTE1(v4) &= ~1u;
  v7 = a1[11];
  a1[11] = v3;
  *a1 = v4;
  v2 = (unsigned __int8 *)a1[9];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = (int)v2;
  a1[9] = v8;
  if ( v7 > (unsigned int)v2 )
  {
LABEL_17:
    a1[1] = (int)(v2 + 1);
    return *v2;
  }
  v9 = a1[12];
  a1[1] = (int)v2;
  if ( !v9 )
    goto LABEL_15;
LABEL_7:
  if ( save_for_backup(a1, a1[2]) )
    return -1;
LABEL_8:
  v5 = a1[37];
  if ( (char *)_start___libc_atexit - (char *)&_start___libc_IO_vtables <= (unsigned int)(v5
                                                                                        - (_DWORD)&_start___libc_IO_vtables) )
    IO_vtable_check();
  return (*(int (__cdecl **)(int *))(v5 + 20))(a1);
}

//----- (0808BF90) --------------------------------------------------------
_BYTE *__cdecl IO_getline(int *a1, _BYTE *a2, unsigned int a3, int a4, int a5)
{
  return IO_getline_info(a1, a2, a3, a4, a5, 0);
}

//----- (0804818C) --------------------------------------------------------
int init_proc()
{
  return 0;
}

//----- (080483BC) --------------------------------------------------------
void __noreturn detach_arena_part_2()
{
  _malloc_assert("detach_arena");
}

//----- (080483D8) --------------------------------------------------------
void __noreturn oom()
{
  dl_dprintf(2, "cannot allocate memory for thread-local data: ABORT\n");
  exit(127);
}

//----- (08048410) --------------------------------------------------------
int init_cacheinfo()
{
  signed int v0; // edi
  int result; // eax
  int v2; // ebp
  int v3; // edi
  int v4; // ebx
  int v5; // ecx
  int v6; // ebp
  int v7; // edi
  int v8; // esi
  int v14; // ecx
  unsigned int v15; // ecx
  int v16; // eax
  int v17; // esi
  unsigned int v28; // ebx
  bool v34; // al
  int v35; // ecx
  int v36; // ebp
  int v37; // esi
  int v38; // edi
  int v44; // ecx
  unsigned int v45; // ecx
  unsigned int v46; // ecx
  int v47; // eax
  unsigned int v48; // ecx
  int v49; // [esp+4h] [ebp-38h]
  int v50; // [esp+8h] [ebp-34h]
  int v51; // [esp+Ch] [ebp-30h]
  bool v52; // [esp+13h] [ebp-29h]
  int v53; // [esp+14h] [ebp-28h]
  int v54; // [esp+1Ch] [ebp-20h]

  if ( dl_x86_cpu_features != 1 )
  {
    if ( dl_x86_cpu_features != 2 )
      goto LABEL_3;
    v2 = handle_amd(188);
    v3 = handle_amd(191);
    v17 = handle_amd(194);
    _EAX = 0x80000000;
    __asm { cpuid }
    if ( v17 <= 0 )
      goto LABEL_28;
    if ( _EAX <= 0x80000007 )
    {
      _EAX = 1;
      __asm { cpuid }
      if ( (_EDX & 0x10000000) == 0 )
        goto LABEL_36;
      v28 = BYTE2(_EBX);
      if ( !v28 )
      {
        v3 += v17;
        goto LABEL_28;
      }
    }
    else
    {
      _EAX = -2147483640;
      __asm { cpuid }
      v28 = 1 << ((unsigned __int16)_ECX >> 12);
    }
    v17 /= v28;
LABEL_36:
    v3 += v17;
    goto LABEL_28;
  }
  v2 = handle_intel(188, dword_80EC564);
  v49 = handle_intel(191, dword_80EC564);
  v3 = handle_intel(194, dword_80EC564);
  if ( v3 <= 0 )
  {
    v3 = v49;
    v50 = -1;
    v53 = 2;
  }
  else
  {
    v50 = 0;
    v53 = 3;
  }
  if ( (byte_80EC577 & 0x10) == 0 )
    goto LABEL_28;
  if ( dword_80EC564 <= 3 )
  {
    v51 = 0;
    v52 = 1;
LABEL_20:
    v15 = (unsigned __int8)byte_80EC56E;
    goto LABEL_21;
  }
  v4 = 3;
  if ( v50 )
  {
    v4 = 1;
    v50 = -1;
  }
  v54 = v2;
  v5 = 0;
  v6 = v3;
  v51 = 0;
  v52 = 1;
  v7 = v4;
  while ( 1 )
  {
    v8 = v5 + 1;
    _EAX = 4;
    __asm { cpuid }
    if ( (_EAX & 0x1F) == 0 )
    {
      v3 = v6;
      v2 = v54;
      goto LABEL_20;
    }
    v14 = (unsigned __int8)_EAX >> 5;
    if ( v14 == 2 )
      break;
    if ( v14 == 3 && (v7 & 2) != 0 )
    {
      v7 &= ~2u;
      v50 = (_EAX >> 14) & 0x3FF;
      v52 = (_EDX & 2) != 0;
      goto LABEL_17;
    }
LABEL_18:
    v5 = v8;
  }
  if ( (v7 & 1) == 0 )
    goto LABEL_18;
  v7 &= ~1u;
  v51 = (_EAX >> 14) & 0x3FF;
LABEL_17:
  if ( v7 )
    goto LABEL_18;
  v3 = v6;
  v2 = v54;
  if ( dword_80EC564 <= 10 )
    goto LABEL_61;
  v34 = 1;
  if ( v50 <= 0 )
    v34 = v51 > 0 && v53 == 2;
  v35 = 0;
  v36 = v3;
  v37 = (v51 > 0 && v53 == 3) | (2 * v34);
LABEL_44:
  while ( v37 )
  {
    v38 = v35 + 1;
    _EAX = 11;
    __asm { cpuid }
    v44 = _ECX & 0xFF00;
    if ( !(_BYTE)_EBX || !v44 )
      break;
    if ( v44 == 256 )
    {
      if ( (v37 & 1) != 0 )
      {
        _BitScanReverse(&v46, v51);
        v47 = -1 << (v46 + 1);
        v37 &= ~1u;
        v35 = v38;
        v51 = ((unsigned __int8)_EBX - 1) & ~v47;
        goto LABEL_44;
      }
LABEL_49:
      v35 = v38;
      goto LABEL_44;
    }
    if ( v44 != 512 || (v37 & 2) == 0 )
      goto LABEL_49;
    if ( v53 == 2 )
    {
      _BitScanReverse(&v48, v51);
      v51 = ((unsigned __int8)_EBX - 1) & ~(-1 << (v48 + 1));
    }
    else
    {
      _BitScanReverse(&v45, v50);
      v50 = ((unsigned __int8)_EBX - 1) & ~(-1 << (v45 + 1));
    }
    v37 &= ~2u;
    v35 = v38;
  }
  v3 = v36;
  v2 = v54;
LABEL_61:
  v51 -= (v51 == 0) - 1;
  if ( v50 > 0 )
  {
    if ( v53 == 2 )
      goto LABEL_63;
    v15 = v50 + 1;
    goto LABEL_21;
  }
  if ( v53 != 2 )
  {
    v15 = -1;
    if ( v50 )
      goto LABEL_21;
    goto LABEL_24;
  }
LABEL_63:
  if ( v51 )
  {
    v15 = v51;
    if ( (unsigned int)v51 <= 2 || dword_80EC598 != 6 )
      goto LABEL_21;
    if ( dword_80EC59C != 77 )
    {
      if ( (unsigned int)dword_80EC59C > 0x4D )
      {
        if ( dword_80EC59C != 90 && dword_80EC59C != 93 )
          goto LABEL_21;
      }
      else if ( dword_80EC59C != 55 && dword_80EC59C != 74 )
      {
        goto LABEL_21;
      }
    }
    v15 = 2;
LABEL_21:
    if ( v3 > 0 && v15 )
      v3 /= v15;
LABEL_24:
    if ( !v52 )
    {
      if ( v51 )
        v49 /= v51;
LABEL_27:
      v3 += v49;
    }
  }
  else if ( !v52 )
  {
    goto LABEL_27;
  }
LABEL_28:
  if ( v2 > 0 )
  {
    _x86_raw_data_cache_size = v2;
    _x86_data_cache_size = v2 & 0xFFFFFF00;
    _x86_raw_data_cache_size_half = v2 >> 1;
    _x86_data_cache_size_half = (int)(v2 & 0xFFFFFF00) >> 1;
  }
  if ( v3 > 0 )
  {
    v16 = v3;
    _x86_raw_shared_cache_size = v3;
    v0 = v3 & 0xFFFFFF00;
    _x86_shared_cache_size = v0;
    _x86_raw_shared_cache_size_half = v16 >> 1;
    _x86_shared_cache_size_half = v0 >> 1;
    goto LABEL_4;
  }
LABEL_3:
  v0 = _x86_shared_cache_size;
LABEL_4:
  result = 6 * v0;
  _x86_shared_non_temporal_threshold = 6 * v0;
  return result;
}

//----- (080489A0) --------------------------------------------------------
void __cdecl get_flag(int a1, int a2)
{
  int v2; // esi
  unsigned __int8 v3; // al
  int v4; // ecx
  unsigned __int8 v5; // al

  if ( a1 == 814536271 && a2 == 425138641 )
  {
    v2 = fopen("flag.txt", "rt");
    v3 = getc(v2);
    if ( v3 != 255 )
    {
      v4 = (char)v3;
      do
      {
        putchar(v4);
        v5 = getc(v2);
        v4 = (char)v5;
      }
      while ( v5 != 255 );
    }
    fclose(v2);
  }
}

//----- (080BC360) --------------------------------------------------------
void term_proc()
{
  ;
}



2.Here is the file security infomation identified by 'checksec' command:
{"relro": "partial", "canary": "no", "nx": "yes", "pie": "no", "rpath": "no", "runpath": "no", "symbols": "yes", "fortify_source": "no", "fortified": "0", "fortify-able": "0"}

3.We use ROPgadget to search gadgets on rop9:
Gadgets information
============================================================
0x0809e102 : pop ds ; pop ebx ; pop esi ; pop edi ; ret
0x0809e0fa : pop eax ; pop ebx ; pop esi ; pop edi ; ret
0x080b91e6 : pop eax ; ret
0x0804c56d : pop eax ; ret 0x80e
0x080d9ff8 : pop eax ; ret 0xfff7
0x080dfcd8 : pop eax ; ret 0xfff9
0x0805bf3d : pop ebp ; pop ebx ; pop esi ; pop edi ; ret
0x0809e4c5 : pop ebp ; pop esi ; pop edi ; ret
0x080483ba : pop ebp ; ret
0x080a25b9 : pop ebp ; ret 0x10
0x08096b21 : pop ebp ; ret 0x14
0x080718b4 : pop ebp ; ret 0xc
0x0804ab69 : pop ebp ; ret 4
0x08049a98 : pop ebp ; ret 8
0x0809e4c4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret
0x0809a7dc : pop ebx ; pop edi ; ret
0x0806fc09 : pop ebx ; pop edx ; ret
0x0804f460 : pop ebx ; pop esi ; pop ebp ; ret
0x080483b7 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080a25b6 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10
0x08096b1e : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14
0x080718b1 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc
0x0804ab66 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4
0x08049a95 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8
0x080509a5 : pop ebx ; pop esi ; pop edi ; ret
0x080498af : pop ebx ; pop esi ; pop edi ; ret 4
0x08049923 : pop ebx ; pop esi ; ret
0x080481ad : pop ebx ; ret
0x080d413c : pop ebx ; ret 0x6f9
0x08099f96 : pop ebx ; ret 8
0x0806fc31 : pop ecx ; pop ebx ; ret
0x080483b9 : pop edi ; pop ebp ; ret
0x080a25b8 : pop edi ; pop ebp ; ret 0x10
0x08096b20 : pop edi ; pop ebp ; ret 0x14
0x080718b3 : pop edi ; pop ebp ; ret 0xc
0x0804ab68 : pop edi ; pop ebp ; ret 4
0x08049a97 : pop edi ; pop ebp ; ret 8
0x08063adb : pop edi ; pop esi ; pop ebx ; ret
0x0805cd88 : pop edi ; pop esi ; ret
0x0805099d : pop edi ; ret
0x080498b1 : pop edi ; ret 4
0x0806fc30 : pop edx ; pop ecx ; pop ebx ; ret
0x0806fc0a : pop edx ; ret
0x0809bff2 : pop edx ; ret 0xfffa
0x0809e0f9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret
0x0807b1b0 : pop es ; pop ebx ; ret
0x0806795a : pop es ; pop edi ; ret
0x08067b9a : pop es ; ret
0x0804f461 : pop esi ; pop ebp ; ret
0x0806fc08 : pop esi ; pop ebx ; pop edx ; ret
0x0805d090 : pop esi ; pop ebx ; ret
0x080483b8 : pop esi ; pop edi ; pop ebp ; ret
0x080a25b7 : pop esi ; pop edi ; pop ebp ; ret 0x10
0x08096b1f : pop esi ; pop edi ; pop ebp ; ret 0x14
0x080718b2 : pop esi ; pop edi ; pop ebp ; ret 0xc
0x0804ab67 : pop esi ; pop edi ; pop ebp ; ret 4
0x08049a96 : pop esi ; pop edi ; pop ebp ; ret 8
0x0805099c : pop esi ; pop edi ; ret
0x080498b0 : pop esi ; pop edi ; ret 4
0x08048a18 : pop esi ; ret
0x08093efe : pop esi ; ret 0xfffd
0x0805b8a0 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080b9196 : pop esp ; ret
0x0804c5cc : pop esp ; ret 0x80e
0x0809efe2 : pop ss ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x080a8623 : pop ss ; ret
0x08064169 : pop ss ; ret 0x2c73
0x08064b2a : pop ss ; ret 0x3273
0x08064154 : pop ss ; ret 0x3e73
0x08064b10 : pop ss ; ret 0x4c73
0x0806413f : pop ss ; ret 0x5073
0x0806412a : pop ss ; ret 0x6273
0x08064af6 : pop ss ; ret 0x6673
0x080626a5 : pop ss ; ret 0x830f
0x08048196 : ret
0x0804846f : ret 0
0x080a25ba : ret 0x10
0x0807ae90 : ret 0x101
0x0808adf7 : ret 0x107
0x080af54f : ret 0x1075
0x08058881 : ret 0x108
0x0809c6b4 : ret 0x10eb
0x0805de00 : ret 0x110
0x0809ad83 : ret 0x1172
0x0806fc5c : ret 0x1175
0x08073cd1 : ret 0x1189
0x08096b22 : ret 0x14
0x08099ad4 : ret 0x1474
0x08078c19 : ret 0x153b
0x080b7368 : ret 0x1577
0x080580e0 : ret 0x1589
0x08059d1a : ret 0x15e
0x08069617 : ret 0x1676
0x080a0734 : ret 0x1689
0x08090186 : ret 0x190
0x080cc906 : ret 0x198
0x0809849d : ret 0x1a72
0x080d3956 : ret 0x1ad4
0x080d20ed : ret 0x1b49
0x080a0520 : ret 0x1b9
0x08059eab : ret 0x1bb
0x0807935d : ret 0x1be
0x080ba283 : ret 0x1c89
0x080aa4d0 : ret 0x1d0
0x080ca090 : ret 0x1d4
0x080ca828 : ret 0x1d5
0x0805fbed : ret 0x1d72
0x08068d2e : ret 0x1d75
0x0805dc0d : ret 0x1e72
0x08096389 : ret 0x1eeb
0x0807b19d : ret 0x200
0x0809f00e : ret 0x20b9
0x0805a440 : ret 0x2375
0x080c9098 : ret 0x24
0x0805c1ca : ret 0x2474
0x080a62da : ret 0x25
0x08053fd9 : ret 0x2501
0x0806d258 : ret 0x2577
0x0804f8bf : ret 0x2673
0x08069607 : ret 0x2676
0x0804894d : ret 0x26b5
0x080a3214 : ret 0x273
0x08068d49 : ret 0x275
0x080dd5ff : ret 0x28
0x08064f4a : ret 0x280f
0x08091d02 : ret 0x2875
0x0805579d : ret 0x28b
0x08082f72 : ret 0x2901
0x08093dba : ret 0x290c
0x0805d6bb : ret 0x2910
0x0805843b : ret 0x2975
0x0809efdb : ret 0x2b8
0x080a9379 : ret 0x2b9
0x0809ad9e : ret 0x2c6
0x0806416a : ret 0x2c73
0x0805bcf9 : ret 0x2c75
0x08095890 : ret 0x2ee9
0x08056f96 : ret 0x301
0x080ab969 : ret 0x31e9
0x08064b2b : ret 0x3273
0x0808f252 : ret 0x3276
0x080c9588 : ret 0x33
0x0804cbb4 : ret 0x3325
0x080abf76 : ret 0x348b
0x0804c924 : ret 0x3677
0x08098427 : ret 0x3773
0x0805acdf : ret 0x3774
0x0808ba9e : ret 0x3775
0x080d3236 : ret 0x3827
0x08068d13 : ret 0x3875
0x080705ec : ret 0x3880
0x080547b3 : ret 0x389
0x080d18c6 : ret 0x38ae
0x08053bc7 : ret 0x38b
0x0804cf0b : ret 0x3901
0x08073a9e : ret 0x3904
0x08090081 : ret 0x3907
0x08056267 : ret 0x3908
0x0807d2e6 : ret 0x390c
0x08059561 : ret 0x3910
0x080695f4 : ret 0x3976
0x080916da : ret 0x3a80
0x0807b70a : ret 0x3b01
0x080563ca : ret 0x3c74
0x08058e8d : ret 0x3c8d
0x0806ce93 : ret 0x3d83
0x08064155 : ret 0x3e73
0x08069a57 : ret 0x3f
0x0808f3b8 : ret 0x408d
0x0804eeac : ret 0x4174
0x0807223b : ret 0x418d
0x08094ccf : ret 0x420f
0x0805c5b3 : ret 0x428d
0x080a1264 : ret 0x430f
0x0806d794 : ret 0x4389
0x0805c501 : ret 0x4401
0x080ac120 : ret 0x442b
0x0804eafd : ret 0x443b
0x08052522 : ret 0x4489
0x08057c65 : ret 0x448b
0x08099f30 : ret 0x448d
0x08051cb8 : ret 0x44c7
0x080b3888 : ret 0x44d9
0x08049ce6 : ret 0x4589
0x08050290 : ret 0x458b
0x0809c3e2 : ret 0x45c7
0x0809fcf5 : ret 0x45e9
0x08095454 : ret 0x4668
0x0809ac57 : ret 0x4689
0x080987bc : ret 0x468b
0x080d23c4 : ret 0x474c
0x080cc88e : ret 0x48
0x080ac336 : ret 0x48b
0x0804b37b : ret 0x48d
0x080d3b82 : ret 0x48f
0x08068f43 : ret 0x498d
0x080a215b : ret 0x4a76
0x08064b11 : ret 0x4c73
0x08094ee7 : ret 0x4c8b
0x08051475 : ret 0x4d8b
0x0804eeb3 : ret 0x4e0f
0x080d35e3 : ret 0x4e27
0x08051ab2 : ret 0x5052
0x08090ea2 : ret 0x5053
0x080ab9ae : ret 0x5055
0x08064140 : ret 0x5073
0x080b8e5e : ret 0x5074
0x080af575 : ret 0x508d
0x0804fc96 : ret 0x512c
0x080b3280 : ret 0x5152
0x0809b16f : ret 0x51e9
0x0804aa2c : ret 0x5201
0x0809a623 : ret 0x5210
0x08064ece : ret 0x528d
0x080612f2 : ret 0x5310
0x0809ff26 : ret 0x5356
0x08094b2a : ret 0x5374
0x08068cf8 : ret 0x5375
0x0808aff8 : ret 0x5389
0x080ae2bb : ret 0x5409
0x0808576d : ret 0x542b
0x080a08e8 : ret 0x5438
0x080a0873 : ret 0x543a
0x0806cfa8 : ret 0x5484
0x0806ce9f : ret 0x5488
0x080492b9 : ret 0x5489
0x080d184c : ret 0x5508
0x0805b9bb : ret 0x5589
0x0809a3d0 : ret 0x558b
0x0806c2e8 : ret 0x5608
0x0808092b : ret 0x5652
0x080565a1 : ret 0x5657
0x080988f3 : ret 0x5689
0x0806faae : ret 0x56c3
0x08062765 : ret 0x5708
0x08069cbc : ret 0x5710
0x0804feef : ret 0x572b
0x080b8e7b : ret 0x574
0x080ad9d6 : ret 0x5752
0x08074e07 : ret 0x57e9
0x080d3b14 : ret 0x5803
0x080d1520 : ret 0x591c
0x080d2287 : ret 0x5ae4
0x080779cd : ret 0x5be
0x0806d00d : ret 0x5c89
0x0808fe50 : ret 0x5c8b
0x080b66dc : ret 0x5d5e
0x08069350 : ret 0x5deb
0x08057ca5 : ret 0x5e89
0x0804e476 : ret 0x5e9
0x08053687 : ret 0x5f3c
0x080941f7 : ret 0x5f6
0x080be1e4 : ret 0x60a
0x08051bbc : ret 0x6176
0x0806412b : ret 0x6273
0x080d3fae : ret 0x62c1
0x0809be97 : ret 0x65e9
0x08067e53 : ret 0x6640
0x08064af7 : ret 0x6673
0x08072f73 : ret 0x674
0x08069627 : ret 0x676
0x080d153f : ret 0x67b2
0x0806d315 : ret 0x67e9
0x0809905b : ret 0x6850
0x0806df74 : ret 0x6b8
0x0809f030 : ret 0x6b89
0x08059146 : ret 0x6d74
0x080591fe : ret 0x6f74
0x080512eb : ret 0x6f8d
0x080d413d : ret 0x6f9
0x0804b475 : ret 0x703
0x0806f0dd : ret 0x7074
0x0805a055 : ret 0x7374
0x08054c3a : ret 0x7401
0x08050cb2 : ret 0x7402
0x08048d93 : ret 0x7420
0x080821f8 : ret 0x7440
0x080821d9 : ret 0x7450
0x08094a6a : ret 0x7459
0x0805acc7 : ret 0x7489
0x08094aab : ret 0x748d
0x080aa548 : ret 0x74e9
0x08095137 : ret 0x74ff
0x08063aaf : ret 0x7501
0x08063ab4 : ret 0x7502
0x0806fe30 : ret 0x7503
0x08063ab9 : ret 0x7504
0x08063abe : ret 0x7508
0x08063ac3 : ret 0x7510
0x08063ac8 : ret 0x7520
0x08063acd : ret 0x7540
0x080919dc : ret 0x768d
0x0804c964 : ret 0x76e8
0x0804836f : ret 0x776
0x080a751d : ret 0x7874
0x080568b0 : ret 0x78b
0x080779a1 : ret 0x7be
0x080b8f41 : ret 0x7c80
0x08096800 : ret 0x7c89
0x08084363 : ret 0x7cd9
0x08078eeb : ret 0x7d7d
0x080627a5 : ret 0x7e10
0x0808a427 : ret 0x7f3c
0x0805d7c5 : ret 0x80
0x080b9bb1 : ret 0x8001
0x08091fc6 : ret 0x8008
0x08094aff : ret 0x80a1
0x080d6b39 : ret 0x80b
0x0804964b : ret 0x80e
0x0805a1e7 : ret 0x8101
0x080ba433 : ret 0x8166
0x080ba7d5 : ret 0x820f
0x08059a17 : ret 0x828b
0x0804a11a : ret 0x8301
0x0805d061 : ret 0x8304
0x08061297 : ret 0x8308
0x0805c57b : ret 0x830f
0x080608e0 : ret 0x8310
0x0805d045 : ret 0x8320
0x0805ddca : ret 0x8340
0x080726b6 : ret 0x8365
0x0804f5d1 : ret 0x8389
0x080acec9 : ret 0x83ff
0x08092c7a : ret 0x8401
0x0804c758 : ret 0x840f
0x0805b9ac : ret 0x8501
0x0807e5e9 : ret 0x8503
0x08085760 : ret 0x8504
0x0808fe49 : ret 0x8506
0x0804b5bc : ret 0x8508
0x08051db7 : ret 0x850f
0x08069aaa : ret 0x8540
0x0804b02a : ret 0x8589
0x08086c14 : ret 0x858b
0x080870e0 : ret 0x858d
0x0807df71 : ret 0x85c7
0x08048c7b : ret 0x860f
0x0807d738 : ret 0x870f
0x080d0e66 : ret 0x871e
0x0809ad94 : ret 0x874
0x0808a42e : ret 0x875
0x0804cf26 : ret 0x8801
0x08084124 : ret 0x8820
0x0805c434 : ret 0x8901
0x08076bea : ret 0x8902
0x08074dc4 : ret 0x8904
0x0809741d : ret 0x8908
0x0804e80f : ret 0x8909
0x0805fc2c : ret 0x8910
0x08096963 : ret 0x891d
0x080bb624 : ret 0x8955
0x080567e4 : ret 0x895b
0x0805851d : ret 0x897c
0x08081c84 : ret 0x8b01
0x0804b59c : ret 0x8b04
0x080706dd : ret 0x8b08
0x080d368a : ret 0x8b36
0x080a03e9 : ret 0x8b3c
0x0807a81d : ret 0x8d01
0x0804a9a1 : ret 0x8d04
0x0804f066 : ret 0x8d0f
0x080699f1 : ret 0x8d10
0x08072856 : ret 0x8d3c
0x0805a0c8 : ret 0x8d75
0x0804e74a : ret 0x8d90
0x08073560 : ret 0x8dc3
0x08080859 : ret 0x8f0f
0x0807635e : ret 0x901
0x08078961 : ret 0x90bb
0x080b970d : ret 0x90c3
0x08099802 : ret 0x940f
0x0806e502 : ret 0x950f
0x080a5b12 : ret 0x9539
0x080a6b27 : ret 0x953b
0x0804ae6d : ret 0x953d
0x080d24b3 : ret 0x9576
0x0808756a : ret 0x9589
0x080898f6 : ret 0x958b
0x0809c920 : ret 0x962b
0x0804a20d : ret 0x96e9
0x0809d7cc : ret 0x974
0x080b72d8 : ret 0x9789
0x080a3545 : ret 0x9875
0x0806d2e6 : ret 0x99eb
0x080568f7 : ret 0x9a74
0x080c7bc0 : ret 0xa
0x08057e65 : ret 0xa101
0x0808109c : ret 0xa2e9
0x0809a0a6 : ret 0xa3c
0x080baac9 : ret 0xa473
0x080d21a3 : ret 0xa514
0x08057e6d : ret 0xa7e
0x0804f54a : ret 0xaa
0x080d2627 : ret 0xac65
0x080d2fe0 : ret 0xacfc
0x080835c0 : ret 0xad83
0x08087069 : ret 0xb
0x080a1c65 : ret 0xb0ff
0x0809910d : ret 0xb373
0x08083906 : ret 0xb37d
0x080b391f : ret 0xb474
0x0804a076 : ret 0xb60f
0x080b2721 : ret 0xb68d
0x08074052 : ret 0xb6e9
0x08090690 : ret 0xb70f
0x0805a125 : ret 0xb775
0x0806d2de : ret 0xb8
0x0806d2ba : ret 0xb9
0x080d24ee : ret 0xb9b9
0x0809aba4 : ret 0xba
0x0808c75f : ret 0xbbe8
0x0807ec3e : ret 0xbd80
0x0809a28a : ret 0xbd83
0x080d2244 : ret 0xbe57
0x080a71d0 : ret 0xbe75
0x0806eb3b : ret 0xbee
0x080718b5 : ret 0xc
0x08090cc9 : ret 0xc031
0x0804e09a : ret 0xc075
0x08074bf7 : ret 0xc083
0x08093287 : ret 0xc084
0x08068e3e : ret 0xc085
0x08064dff : ret 0xc0be
0x0804e758 : ret 0xc101
0x080aca10 : ret 0xc102
0x08081d92 : ret 0xc11f
0x08070edb : ret 0xc183
0x0804b796 : ret 0xc189
0x08057558 : ret 0xc208
0x080ac3b5 : ret 0xc220
0x08086ebb : ret 0xc221
0x08090140 : ret 0xc269
0x080758ef : ret 0xc283
0x08059735 : ret 0xc289
0x08064979 : ret 0xc2bb
0x0808f5b0 : ret 0xc2c7
0x080e0a0d : ret 0xc30a
0x0809abb1 : ret 0xc35f
0x080587b0 : ret 0xc383
0x08057ee2 : ret 0xc389
0x0804ca92 : ret 0xc483
0x080d0a82 : ret 0xc4c3
0x080d1df8 : ret 0xc4ff
0x0808e02f : ret 0xc5e9
0x08077719 : ret 0xc5eb
0x08072f77 : ret 0xc601
0x08050add : ret 0xc689
0x080a8915 : ret 0xc701
0x0807802d : ret 0xc704
0x080906d6 : ret 0xc708
0x08048e3f : ret 0xc74
0x080a0ddc : ret 0xc783
0x080ba955 : ret 0xc789
0x08091020 : ret 0xc80f
0x0807d229 : ret 0xc83d
0x080580fc : ret 0xc889
0x080910e8 : ret 0xc8d
0x0807303a : ret 0xc931
0x0806e60e : ret 0xca20
0x08048678 : ret 0xca21
0x0805c826 : ret 0xca29
0x080a2d42 : ret 0xca77
0x0807b4b1 : ret 0xca81
0x0808c46c : ret 0xca83
0x0809e45a : ret 0xcb01
0x0805bd10 : ret 0xcb8
0x080e8d02 : ret 0xcc0
0x08057181 : ret 0xcc75
0x080d188a : ret 0xcca7
0x080d3969 : ret 0xcd11
0x0804c439 : ret 0xce80
0x0809bdc7 : ret 0xce89
0x080bb849 : ret 0xceeb
0x0806e505 : ret 0xcf39
0x080c7fc0 : ret 0xd
0x08070401 : ret 0xd009
0x0806f961 : ret 0xd029
0x0804921e : ret 0xd039
0x0804cbc4 : ret 0xd089
0x0809c917 : ret 0xd108
0x080a0361 : ret 0xd129
0x080a070f : ret 0xd138
0x08075e9a : ret 0xd184
0x0807b6eb : ret 0xd189
0x080995be : ret 0xd231
0x080ad07b : ret 0xd284
0x08048378 : ret 0xd285
0x0806fc71 : ret 0xd3eb
0x080770df : ret 0xd539
0x080a8acb : ret 0xd629
0x0805913d : ret 0xd639
0x080a6899 : ret 0xd729
0x0808d5f6 : ret 0xd73
0x0805a3e1 : ret 0xd739
0x08075b4e : ret 0xd776
0x08057dd4 : ret 0xd801
0x080568b9 : ret 0xd875
0x0804b765 : ret 0xd889
0x08048cec : ret 0xd89
0x080d3401 : ret 0xd8f
0x080901ba : ret 0xd8f7
0x08099b17 : ret 0xd989
0x08057454 : ret 0xda01
0x080b8f51 : ret 0xda84
0x0804f429 : ret 0xdaf7
0x08067d6a : ret 0xdb31
0x0805a0de : ret 0xdb85
0x0809c6e8 : ret 0xdc75
0x080d34e2 : ret 0xdcd9
0x0807113a : ret 0xdceb
0x080d2462 : ret 0xde5d
0x080d11f5 : ret 0xde9e
0x08056406 : ret 0xdf75
0x080547a8 : ret 0xe083
0x0805d5ec : ret 0xe0c1
0x08048d09 : ret 0xe183
0x080740b8 : ret 0xe1e9
0x0808e525 : ret 0xe280
0x0804f1e8 : ret 0xe281
0x08048d6f : ret 0xe283
0x0804e5b4 : ret 0xe2c1
0x0809cf87 : ret 0xe2d3
0x080a6997 : ret 0xe37f
0x0806cd3d : ret 0xe383
0x080dd623 : ret 0xe41
0x080d3602 : ret 0xe71f
0x080564de : ret 0xe775
0x0809ddc6 : ret 0xe829
0x0808f6b1 : ret 0xe883
0x0805c481 : ret 0xe889
0x080a1422 : ret 0xe8b8
0x0809553f : ret 0xe8c0
0x0809eeb7 : ret 0xe8c1
0x0804a1cc : ret 0xe901
0x0804a218 : ret 0xe902
0x080d1967 : ret 0xe970
0x080755e1 : ret 0xe983
0x080501f2 : ret 0xea81
0x080a222f : ret 0xea83
0x08081c32 : ret 0xeac0
0x080488ce : ret 0xeac1
0x080965dc : ret 0xead1
0x08075bc4 : ret 0xead3
0x080916e1 : ret 0xeb01
0x08075f9d : ret 0xeb29
0x080d4114 : ret 0xec2
0x08099ae8 : ret 0xec75
0x0808b942 : ret 0xec83
0x080583fa : ret 0xed85
0x08082fa7 : ret 0xee7f
0x08080b8c : ret 0xeee9
0x080d3db6 : ret 0xef32
0x0805d6aa : ret 0xf
0x080ad963 : ret 0xf001
0x0804e951 : ret 0xf01
0x08068a1a : ret 0xf02
0x08082a4a : ret 0xf029
0x0806292f : ret 0xf04
0x08056794 : ret 0xf07
0x080af55f : ret 0xf074
0x0808641c : ret 0xf08
0x080499a5 : ret 0xf089
0x080689c3 : ret 0xf10
0x080b8f55 : ret 0xf139
0x0807a7d4 : ret 0xf175
0x0807c87b : ret 0xf189
0x080826d7 : ret 0xf1f
0x080689d4 : ret 0xf20
0x0805ade6 : ret 0xf289
0x08082732 : ret 0xf375
0x08059faa : ret 0xf377
0x080689e5 : ret 0xf40
0x08094e71 : ret 0xf475
0x08082c08 : ret 0xf50
0x08062604 : ret 0xf608
0x08070e7c : ret 0xf610
0x0806d594 : ret 0xf631
0x0805db88 : ret 0xf66
0x0805a465 : ret 0xf685
0x08053d46 : ret 0xf689
0x080ba495 : ret 0xf74
0x0805c41e : ret 0xf775
0x080b39f4 : ret 0xf7f
0x080751b3 : ret 0xf800
0x080a3751 : ret 0xf801
0x0808bcfb : ret 0xf829
0x080d10d4 : ret 0xf869
0x0808fa02 : ret 0xf883
0x0809c331 : ret 0xf889
0x0806f5d6 : ret 0xf8c1
0x080afd34 : ret 0xf929
0x080a3ad3 : ret 0xf983
0x0805738b : ret 0xfa01
0x0805368e : ret 0xfa09
0x080aecca : ret 0xfa29
0x080b034f : ret 0xfa81
0x080725f9 : ret 0xfa83
0x08050d52 : ret 0xfac1
0x0809c2da : ret 0xfad3
0x08083cf4 : ret 0xfb01
0x08094b4a : ret 0xfb36
0x080a404a : ret 0xfb64
0x0809504a : ret 0xfc54
0x0808b74a : ret 0xfce8
0x080775da : ret 0xfd20
0x080744da : ret 0xfd51
0x0809a27a : ret 0xfe23
0x0809004a : ret 0xfe83
0x08074e76 : ret 0xfe89
0x080530ea : ret 0xfe9
0x080713fa : ret 0xfead
0x080ad5ea : ret 0xff0a
0x08064974 : ret 0xff3
0x08056217 : ret 0xff50
0x0807e428 : ret 0xff52
0x0807906a : ret 0xff5f
0x080531e0 : ret 0xff81
0x08073558 : ret 0xffba
0x080b0e74 : ret 0xffbf
0x0807cb79 : ret 0xffd8
0x080956aa : ret 0xffe2
0x08080e18 : ret 0xffe7
0x080712e1 : ret 0xffe8
0x0809c45a : ret 0xffe9
0x0807b1cb : ret 0xfff0
0x080871e7 : ret 0xfff3
0x080d9f1d : ret 0xfff7
0x0804db49 : ret 0xfff8
0x080dfcd9 : ret 0xfff9
0x08058ba5 : ret 0xfffa
0x08056e4a : ret 0xfffb
0x0804b399 : ret 0xfffc
0x0806d41e : ret 0xfffd
0x0806fedf : ret 0xfffe
0x08055336 : ret 0xffff
0x0805fb06 : ret 1
0x0805fb1c : ret 2
0x0805faaa : ret 3
0x080498b2 : ret 4
0x080572be : ret 5
0x080abe7a : ret 6
0x08061d71 : ret 7
0x08049a99 : ret 8
0x080cc464 : ret 9

Unique gadgets found: 644

