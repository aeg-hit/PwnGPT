'Challenge is a ELF 64-bit LSB executable file and the file path is "./pwn/stack/rop-5/rop5".\n1.Here is the key function for exploit in the C file decompiled from rop5:\n## Extracted Key Functions\n\n```c\n//----- (0000000000400596) ----------------------------------------------------\nint callsystem()\n{\n  return system("/bin/sh");\n}\n\n//----- (00000000004005A6) ----------------------------------------------------\nssize_t vulnerable_function()\n{\n  char buf[128]; // [rsp+0h] [rbp-80h] BYREF\n\n  return read(0, buf, 0x200uLL);\n}\n\n//----- (00000000004005C6) ----------------------------------------------------\nint __fastcall main(int argc, const char **argv, const char **envp)\n{\n  write(1, "Hello, World\\n", 0xDuLL);\n  return vulnerable_function();\n}\n```\n\n\n2.Here is the file security infomation identified by \'checksec\' command:\n{"relro": "no", "canary": "no", "nx": "yes", "pie": "no", "rpath": "no", "runpath": "no", "symbols": "yes", "fortify_source": "no", "fortified": "0", "fortify-able": "1"}\n\n3.Here is some printable strings in the data sections of rop5:\n/bin/sh\n\n4.We use ROPgadget to search gadgets on rop5:\nGadgets information\n============================================================\n0x000000000040065c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n0x000000000040065e : pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000400660 : pop r14 ; pop r15 ; ret\n0x0000000000400662 : pop r15 ; ret\n0x000000000040065b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n0x000000000040065f : pop rbp ; pop r14 ; pop r15 ; ret\n0x0000000000400500 : pop rbp ; ret\n0x0000000000400663 : pop rdi ; ret\n0x0000000000400661 : pop rsi ; pop r15 ; ret\n0x000000000040065d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret\n0x0000000000400431 : ret\n0x0000000000400462 : ret 0x2005\n\nUnique gadgets found: 12\n\n5.Here is information of the file\'s relocation section:\nRelocation section \'.rela.plt\' at offset 0x3a0 contains 5 entries:\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\n000000600a20  000100000007 R_X86_64_JUMP_SLO 0000000000000000 write@GLIBC_2.2.5 + 0\n000000600a28  000200000007 R_X86_64_JUMP_SLO 0000000000000000 system@GLIBC_2.2.5 + 0\n000000600a30  000300000007 R_X86_64_JUMP_SLO 0000000000000000 read@GLIBC_2.2.5 + 0\n000000600a38  000400000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000600a40  000500000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0\n\n'