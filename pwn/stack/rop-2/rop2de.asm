; ---------------------------------------------------------------------------

Elf32_Sym       struc ; (sizeof=0x10, align=0x4, mappedto_1)
                                        ; XREF: LOAD:080481CC/r
                                        ; LOAD:080481DC/r ...
st_name         dd ?                    ; offset (0804825C)
st_value        dd ?                    ; offset (00000000)
st_size         dd ?
st_info         db ?
st_other        db ?
st_shndx        dw ?
Elf32_Sym       ends

; ---------------------------------------------------------------------------

Elf32_Rel       struc ; (sizeof=0x8, align=0x4, copyof_2)
                                        ; XREF: LOAD:080482F8/r
                                        ; LOAD:08048300/r ...
r_offset        dd ?
r_info          dd ?
Elf32_Rel       ends

; ---------------------------------------------------------------------------

Elf32_Dyn       struc ; (sizeof=0x8, align=0x4, copyof_4)
                                        ; XREF: LOAD:_DYNAMIC/r
                                        ; LOAD:08049F30/r ...
d_tag           dd ?
d_un            Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ?
Elf32_Dyn       ends

; ---------------------------------------------------------------------------

Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 union ; (sizeof=0x4, align=0x4, copyof_3)
                                        ; XREF: Elf32_Dyn/r
d_val           dd ?
d_ptr           dd ?
Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ends

; ---------------------------------------------------------------------------

Elf32_Verneed   struc ; (sizeof=0x10, align=0x4, mappedto_5)
                                        ; XREF: LOAD:080482D8/r
vn_version      dw ?
vn_cnt          dw ?
vn_file         dd ?                    ; offset (0804825C)
vn_aux          dd ?
vn_next         dd ?
Elf32_Verneed   ends

; ---------------------------------------------------------------------------

Elf32_Vernaux   struc ; (sizeof=0x10, align=0x4, mappedto_6)
                                        ; XREF: LOAD:080482E8/r
vna_hash        dd ?
vna_flags       dw ?
vna_other       dw ?
vna_name        dd ?                    ; offset (0804825C)
vna_next        dd ?
Elf32_Vernaux   ends


;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2023 Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : B5E7EB6088FF1AAEB264B57CA0EFD11C06A379C70EAFD42B9857EBC7F5974D29
; Input MD5    : 478B1767296070690069CE2194516A69
; Input CRC32  : 49D63F75

; File Name   : D:\project\LLM4CTF\pwn\stack\rop-2\rop2
; Format      : ELF for Intel 386 (Executable)
; Imagebase   : 8048000
; Interpreter '/lib/ld-linux.so.2'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'rop2.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 8048000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_8048000   dd 464C457Fh            ; DATA XREF: LOAD:0804807C↓o
                                        ; File format: \x7FELF
                db 1                    ; File class: 32-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 2                    ; File type: Executable
                dw 3                    ; Machine: Intel 386
                dd 1                    ; File version
                dd offset _start        ; Entry point
                dd 34h                  ; PHT file offset
                dd 1150h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 34h                  ; ELF header size
                dw 20h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 28h                  ; SHT entry size
                dw 1Eh                  ; Number of entries in SHT
                dw 1Bh                  ; SHT entry index for string table
; ELF32 Program Header
; PHT Entry 0
dword_8048034   dd 6                    ; DATA XREF: LOAD:0804803C↓o
                                        ; Type: PHDR
                dd 34h                  ; File offset
                dd offset dword_8048034 ; Virtual address
                dd 8048034h             ; Physical address
                dd 120h                 ; Size in file image
                dd 120h                 ; Size in memory image
                dd 5                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 154h                 ; File offset
                dd offset aLibLdLinuxSo2 ; Virtual address
                dd 8048154h             ; Physical address
                dd 13h                  ; Size in file image
                dd 13h                  ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 0                    ; File offset
                dd offset dword_8048000 ; Virtual address
                dd 8048000h             ; Physical address
                dd 7A4h                 ; Size in file image
                dd 7A4h                 ; Size in memory image
                dd 5                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 0F14h                ; File offset
                dd offset __CTOR_LIST__ ; Virtual address
                dd 8049F14h             ; Physical address
                dd 114h                 ; Size in file image
                dd 11Ch                 ; Size in memory image
                dd 6                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 0F28h                ; File offset
                dd offset _DYNAMIC      ; Virtual address
                dd 8049F28h             ; Physical address
                dd 0C8h                 ; Size in file image
                dd 0C8h                 ; Size in memory image
                dd 6                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 168h                 ; File offset
                dd offset dword_8048168 ; Virtual address
                dd 8048168h             ; Physical address
                dd 44h                  ; Size in file image
                dd 44h                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 634h                 ; File offset
                dd offset unk_8048634   ; Virtual address
                dd 8048634h             ; Physical address
                dd 4Ch                  ; Size in file image
                dd 4Ch                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0                    ; Size in file image
                dd 0                    ; Size in memory image
                dd 6                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 0F14h                ; File offset
                dd offset __CTOR_LIST__ ; Virtual address
                dd 8049F14h             ; Physical address
                dd 0ECh                 ; Size in file image
                dd 0ECh                 ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0 ; DATA XREF: LOAD:0804805C↑o
                align 4
; ELF Note Entry
dword_8048168   dd 4                    ; DATA XREF: LOAD:080480DC↑o
                                        ; Name Size
                dd 10h                  ; Desc Size
                dd 1                    ; Type: NT_GNU_ABI_TAG
aGnu            db 'GNU',0              ; Name
                dd 0, 2, 6, 18h         ; ABI: Linux 2.6.24
; ELF Note Entry
                dd 4                    ; Name Size
                dd 14h                  ; Desc Size
                dd 3                    ; Type: NT_GNU_BUILD_ID
aGnu_0          db 'GNU',0              ; Name
                db 0F5h, 9Ch, 4Eh, 0FBh, 0C2h, 16h, 0BEh, 95h, 21h, 15h ; Desc
                db 4Bh, 38h, 58h, 0D1h, 0EEh, 0EAh, 0A4h, 31h, 0BAh, 0E5h
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 2
elf_gnu_hash_symbias dd 8
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 5
elf_gnu_hash_indexes dd 20002000h
elf_gnu_hash_bucket dd 0, 8
elf_gnu_hash_chain dd 0C0E34BADh
; ELF Symbol Table
                Elf32_Sym <0>
                Elf32_Sym <offset aRead - offset byte_804825C, 0, 0, 12h, 0, 0> ; "read"
                Elf32_Sym <offset aGetegid - offset byte_804825C, 0, 0, 12h, 0, 0> ; "getegid"
                Elf32_Sym <offset aSystem - offset byte_804825C, 0, 0, 12h, 0, 0> ; "system"
                Elf32_Sym <offset aGmonStart - offset byte_804825C, 0, 0, 20h, 0, 0> ; "__gmon_start__"
                Elf32_Sym <offset aLibcStartMain - offset byte_804825C, 0, 0, 12h, 0, \ ; "__libc_start_main"
                           0>
                Elf32_Sym <offset aWrite - offset byte_804825C, 0, 0, 12h, 0, 0> ; "write"
                Elf32_Sym <offset aSetresgid - offset byte_804825C, 0, 0, 12h, 0, 0> ; "setresgid"
                Elf32_Sym <offset aIoStdinUsed - offset byte_804825C, \ ; "_IO_stdin_used"
                           offset _IO_stdin_used, 4, 11h, 0, 0Fh>
; ELF String Table
byte_804825C    db 0                    ; DATA XREF: LOAD:080481DC↑o
                                        ; LOAD:080481EC↑o ...
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0804820C↑o
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:080482D8↓o
aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804824C↑o
aRead           db 'read',0             ; DATA XREF: LOAD:080481DC↑o
aSetresgid      db 'setresgid',0        ; DATA XREF: LOAD:0804823C↑o
aSystem         db 'system',0           ; DATA XREF: LOAD:080481FC↑o
aGetegid        db 'getegid',0          ; DATA XREF: LOAD:080481EC↑o
aLibcStartMain  db '__libc_start_main',0 ; DATA XREF: LOAD:0804821C↑o
aWrite          db 'write',0            ; DATA XREF: LOAD:0804822C↑o
aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:080482E8↓o
                align 2
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; read@@GLIBC_2.0
                dw 2                    ; getegid@@GLIBC_2.0
                dw 2                    ; system@@GLIBC_2.0
                dw 0                    ; local  symbol: __gmon_start__
                dw 2                    ; __libc_start_main@@GLIBC_2.0
                dw 2                    ; write@@GLIBC_2.0
                dw 2                    ; setresgid@@GLIBC_2.0
                dw 1                    ; global symbol: _IO_stdin_used
; ELF GNU Symbol Version Requirements
                Elf32_Verneed <1, 1, offset aLibcSo6 - offset byte_804825C, 10h, 0> ; "libc.so.6"
                Elf32_Vernaux <0D696910h, 0, 2, offset aGlibc20 - offset byte_804825C,\ ; "GLIBC_2.0"
                               0>
; ELF REL Relocation Table
                Elf32_Rel <8049FF0h, 406h> ; R_386_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
                Elf32_Rel <804A000h, 107h> ; R_386_JMP_SLOT read
                Elf32_Rel <804A004h, 207h> ; R_386_JMP_SLOT getegid
                Elf32_Rel <804A008h, 307h> ; R_386_JMP_SLOT system
                Elf32_Rel <804A00Ch, 407h> ; R_386_JMP_SLOT __gmon_start__
                Elf32_Rel <804A010h, 507h> ; R_386_JMP_SLOT __libc_start_main
                Elf32_Rel <804A014h, 607h> ; R_386_JMP_SLOT write
                Elf32_Rel <804A018h, 707h> ; R_386_JMP_SLOT setresgid
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use32
                assume cs:_init
                ;org 8048338h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


; void (*init_proc())(void)
                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+1C↓p
                push    ebx             ; _init
                sub     esp, 8
                call    $+5

loc_8048341:                            ; DATA XREF: _init_proc+A↓o
                pop     ebx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - offset loc_8048341)
                mov     eax, ds:(__gmon_start___ptr - 8049FF4h)[ebx]
                test    eax, eax
                jz      short loc_8048357
                call    ___gmon_start__

loc_8048357:                            ; CODE XREF: _init_proc+18↑j
                call    frame_dummy
                call    __do_global_ctors_aux
                add     esp, 8
                pop     ebx
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 8048366h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use32
                assume cs:_plt
                ;org 8048370h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


; int sub_8048370()
sub_8048370     proc near               ; CODE XREF: .plt:0804838B↓j
                                        ; .plt:0804839B↓j ...
; __unwind {
                push    ds:dword_8049FF8
                jmp     ds:dword_8049FFC
sub_8048370     endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION _getegid. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    10h
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION ___gmon_start__. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    18h
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    20h ; ' '
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION _write. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    28h ; '('
                jmp     sub_8048370
; [00000006 BYTES: COLLAPSED FUNCTION _setresgid. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    30h ; '0'
                jmp     sub_8048370
; } // starts at 8048370
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 80483F0h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

; void __usercall __noreturn start(int@<eax>, void (*)(void)@<edx>)
                public _start
_start          proc near               ; DATA XREF: LOAD:08048018↑o
                xor     ebp, ebp
                pop     esi
                mov     ecx, esp
                and     esp, 0FFFFFFF0h
                push    eax
                push    esp             ; stack_end
                push    edx             ; rtld_fini
                push    offset __libc_csu_fini ; fini
                push    offset __libc_csu_init ; init
                push    ecx             ; ubp_av
                push    esi             ; argc
                push    offset main     ; main
                call    ___libc_start_main
                hlt
_start          endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void _do_global_dtors_aux()
__do_global_dtors_aux proc near         ; CODE XREF: _term_proc+10↓p
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 4
                cmp     ds:completed_6159, 0
                jnz     short loc_804846F
                mov     eax, ds:dtor_idx_6161
                mov     ebx, offset __DTOR_END__
                sub     ebx, offset __DTOR_LIST__
                sar     ebx, 2
                sub     ebx, 1
                cmp     eax, ebx
                jnb     short loc_8048468
                lea     esi, [esi+0]

loc_8048450:                            ; CODE XREF: __do_global_dtors_aux+46↓j
                add     eax, 1
                mov     ds:dtor_idx_6161, eax
                call    ds:__DTOR_LIST__[eax*4]
                mov     eax, ds:dtor_idx_6161
                cmp     eax, ebx
                jb      short loc_8048450

loc_8048468:                            ; CODE XREF: __do_global_dtors_aux+28↑j
                mov     ds:completed_6159, 1

loc_804846F:                            ; CODE XREF: __do_global_dtors_aux+E↑j
                add     esp, 4
                pop     ebx
                pop     ebp
                retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int frame_dummy()
frame_dummy     proc near               ; CODE XREF: _init_proc:loc_8048357↑p
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     eax, ds:__JCR_LIST__
                test    eax, eax
                jz      short locret_80484A1
                mov     eax, 0
                test    eax, eax
                jz      short locret_80484A1
                mov     dword ptr [esp], offset __JCR_LIST__
                call    eax

locret_80484A1:                         ; CODE XREF: frame_dummy+D↑j
                                        ; frame_dummy+16↑j
                leave
                retn
frame_dummy     endp

; ---------------------------------------------------------------------------
                align 4

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int not_called()
                public not_called
not_called      proc near
; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     dword ptr [esp], offset command ; "/bin/date"
                call    _system
                leave
                retn
; } // starts at 80484A4
not_called      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; ssize_t vulnerable_function()
                public vulnerable_function
vulnerable_function proc near           ; CODE XREF: main+E↓p

buf             = byte ptr -88h

; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 98h
                mov     dword ptr [esp+8], 100h ; nbytes
                lea     eax, [ebp+buf]
                mov     [esp+4], eax    ; buf
                mov     dword ptr [esp], 0 ; fd
                call    _read
                leave
                retn
; } // starts at 80484B8
vulnerable_function endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int be_nice_to_people()
                public be_nice_to_people
be_nice_to_people proc near             ; CODE XREF: main+9↓p

var_C           = dword ptr -0Ch

; __unwind {
                push    ebp
                mov     ebp, esp
                sub     esp, 28h
                call    _getegid
                mov     [ebp+var_C], eax
                mov     eax, [ebp+var_C]
                mov     [esp+8], eax
                mov     eax, [ebp+var_C]
                mov     [esp+4], eax
                mov     eax, [ebp+var_C]
                mov     [esp], eax
                call    _setresgid
                leave
                retn
; } // starts at 80484E1
be_nice_to_people endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame fuzzy-sp

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: _start+17↑o

argc            = dword ptr  8
argv            = dword ptr  0Ch
envp            = dword ptr  10h

; __unwind {
                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF0h
                sub     esp, 10h
                call    be_nice_to_people
                call    vulnerable_function
                mov     dword ptr [esp+8], 0Dh ; n
                mov     dword ptr [esp+4], offset aHelloWorld ; "Hello, World\n"
                mov     dword ptr [esp], 1 ; fd
                call    _write
                leave
                retn
; } // starts at 804850A
main            endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_init(void)
                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+10↑o

var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

; __unwind {
                push    ebp
                push    edi
                push    esi
                push    ebx
                call    __i686_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                sub     esp, 1Ch
                mov     ebp, [esp+2Ch+arg_0]
                lea     edi, (__CTOR_LIST__ - 8049FF4h)[ebx]
                call    _init_proc
                lea     eax, (__CTOR_LIST__ - 8049FF4h)[ebx]
                sub     edi, eax
                sar     edi, 2
                test    edi, edi
                jz      short loc_8048599
                xor     esi, esi
                lea     esi, [esi+0]

loc_8048578:                            ; CODE XREF: __libc_csu_init+57↓j
                mov     eax, [esp+2Ch+arg_8]
                mov     [esp+2Ch+var_2C], ebp
                mov     [esp+2Ch+var_24], eax
                mov     eax, [esp+2Ch+arg_4]
                mov     [esp+2Ch+var_28], eax
                call    ds:(__CTOR_LIST__ - 8049FF4h)[ebx+esi*4]
                add     esi, 1
                cmp     esi, edi
                jnz     short loc_8048578

loc_8048599:                            ; CODE XREF: __libc_csu_init+2E↑j
                add     esp, 1Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 8048540
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


; void _libc_csu_fini(void)
                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+B↑o
; __unwind {
                rep retn
; } // starts at 80485B0
__libc_csu_fini endp


; =============== S U B R O U T I N E =======================================


                public __i686_get_pc_thunk_bx
__i686_get_pc_thunk_bx proc near        ; CODE XREF: __libc_csu_init+4↑p
; __unwind {
                mov     ebx, [esp+0]
                retn
; } // starts at 80485B2
__i686_get_pc_thunk_bx endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; void (*_do_global_ctors_aux())(void)
__do_global_ctors_aux proc near         ; CODE XREF: _init_proc+24↑p
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 4
                mov     eax, ds:__CTOR_LIST__
                cmp     eax, 0FFFFFFFFh
                jz      short loc_80485E4
                mov     ebx, offset __CTOR_LIST__
                xchg    ax, ax

loc_80485D8:                            ; CODE XREF: __do_global_ctors_aux+22↓j
                sub     ebx, 4
                call    eax ; __CTOR_LIST__
                mov     eax, [ebx]
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_80485D8

loc_80485E4:                            ; CODE XREF: __do_global_ctors_aux+F↑j
                add     esp, 4
                pop     ebx
                pop     ebp
                retn
__do_global_ctors_aux endp

; ---------------------------------------------------------------------------
                align 4
_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use32
                assume cs:_fini
                ;org 80485ECh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


; void term_proc()
                public _term_proc
_term_proc      proc near
                push    ebx             ; _fini
                sub     esp, 8
                call    $+5

loc_80485F5:                            ; DATA XREF: _term_proc+A↓o
                pop     ebx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - offset loc_80485F5)
                call    __do_global_dtors_aux
                add     esp, 8
                pop     ebx
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 8048606h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use32
                assume cs:_rodata
                ;org 8048608h
                public _fp_hw
_fp_hw          db    3
                db    0
                db    0
                db    0
                public _IO_stdin_used
_IO_stdin_used  db    1                 ; DATA XREF: LOAD:0804824C↑o
                db    0
                db    2
                db    0
aBinBash        db '/bin/bash',0        ; DATA XREF: .data:not_used↓o
; const char command[]
command         db '/bin/date',0        ; DATA XREF: not_called+6↑o
aHelloWorld     db 'Hello, World',0Ah,0 ; DATA XREF: main+1B↑o
_rodata         ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 8048632h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use32
                assume cs:_eh_frame_hdr
                ;org 8048634h
unk_8048634     db    1                 ; DATA XREF: LOAD:080480FC↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  48h ; H
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  3Ch ; <
                db 0FDh
                db 0FFh
                db 0FFh
                db  64h ; d
                db    0
                db    0
                db    0
                db  70h ; p
                db 0FEh
                db 0FFh
                db 0FFh
                db  88h
                db    0
                db    0
                db    0
                db  84h
                db 0FEh
                db 0FFh
                db 0FFh
                db 0A8h
                db    0
                db    0
                db    0
                db 0ADh
                db 0FEh
                db 0FFh
                db 0FFh
                db 0C8h
                db    0
                db    0
                db    0
                db 0D6h
                db 0FEh
                db 0FFh
                db 0FFh
                db 0E8h
                db    0
                db    0
                db    0
                db  0Ch
                db 0FFh
                db 0FFh
                db 0FFh
                db    8
                db    1
                db    0
                db    0
                db  7Ch ; |
                db 0FFh
                db 0FFh
                db 0FFh
                db  44h ; D
                db    1
                db    0
                db    0
                db  7Eh ; ~
                db 0FFh
                db 0FFh
                db 0FFh
                db  58h ; X
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment dword public 'CONST' use32
                assume cs:_eh_frame
                ;org 8048680h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h
                db    1
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0D0h
                db 0FCh
                db 0FFh
                db 0FFh
                db  80h
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db    8
                db  46h ; F
                db  0Eh
                db  0Ch
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  74h ; t
                db    4
                db  78h ; x
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  32h ; 2
                db  24h ; $
                db  22h ; "
                db  1Ch
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db 0E0h
                db 0FDh
                db 0FFh
                db 0FFh
                db  14h
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  50h ; P
                db 0C5h
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  60h ; `
                db    0
                db    0
                db    0
                db 0D4h
                db 0FDh
                db 0FFh
                db 0FFh
                db  29h ; )
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  65h ; e
                db 0C5h
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db    0
                db 0DDh
                db 0FDh
                db 0FFh
                db 0FFh
                db  29h ; )
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  65h ; e
                db 0C5h
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db 0A0h
                db    0
                db    0
                db    0
                db 0E6h
                db 0FDh
                db 0FFh
                db 0FFh
                db  31h ; 1
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  42h ; B
                db  0Dh
                db    5
                db  6Dh ; m
                db 0C5h
                db  0Ch
                db    4
                db    4
                db    0
                db    0
                db  38h ; 8
                db    0
                db    0
                db    0
                db 0C0h
                db    0
                db    0
                db    0
                db 0FCh
                db 0FDh
                db 0FFh
                db 0FFh
                db  61h ; a
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  87h
                db    3
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    4
                db  41h ; A
                db  0Eh
                db  14h
                db  83h
                db    5
                db  4Eh ; N
                db  0Eh
                db  30h ; 0
                db    2
                db  4Ah ; J
                db  0Eh
                db  14h
                db  41h ; A
                db  0Eh
                db  10h
                db 0C3h
                db  41h ; A
                db  0Eh
                db  0Ch
                db 0C6h
                db  41h ; A
                db  0Eh
                db    8
                db 0C7h
                db  41h ; A
                db  0Eh
                db    4
                db 0C5h
                db  10h
                db    0
                db    0
                db    0
                db 0FCh
                db    0
                db    0
                db    0
                db  30h ; 0
                db 0FEh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  10h
                db    1
                db    0
                db    0
                db  1Eh
                db 0FEh
                db 0FFh
                db 0FFh
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
__FRAME_END__   db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_ctors          segment dword public 'DATA' use32
                assume cs:_ctors
                ;org 8049F14h
; int _CTOR_LIST__[]
__CTOR_LIST__   dd -1                   ; DATA XREF: LOAD:0804809C↑o
                                        ; LOAD:0804813C↑o ...
                                        ; Alternative name is '__init_array_end'
__CTOR_END__    dd 0
_ctors          ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_dtors          segment dword public 'DATA' use32
                assume cs:_dtors
                ;org 8049F1Ch
; int _DTOR_LIST__[]
__DTOR_LIST__   dd -1                   ; DATA XREF: __do_global_dtors_aux+1A↑o
                                        ; __do_global_dtors_aux+38↑r
                public __DTOR_END__
__DTOR_END__    dd 0                    ; DATA XREF: __do_global_dtors_aux+15↑o
_dtors          ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_jcr            segment dword public 'DATA' use32
                assume cs:_jcr
                ;org 8049F24h
__JCR_LIST__    dd 0                    ; DATA XREF: frame_dummy+6↑r
                                        ; frame_dummy+18↑o
_jcr            ends

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use32
                assume cs:LOAD
                ;org 8049F28h
_DYNAMIC        Elf32_Dyn <1, <10h>>    ; DATA XREF: LOAD:080480BC↑o
                                        ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libc.so.6
                Elf32_Dyn <0Ch, <8048338h>> ; DT_INIT
                Elf32_Dyn <0Dh, <80485ECh>> ; DT_FINI
                Elf32_Dyn <6FFFFEF5h, <80481ACh>> ; DT_GNU_HASH
                Elf32_Dyn <5, <804825Ch>> ; DT_STRTAB
                Elf32_Dyn <6, <80481CCh>> ; DT_SYMTAB
                Elf32_Dyn <0Ah, <69h>>  ; DT_STRSZ
                Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
                Elf32_Dyn <15h, <0>>    ; DT_DEBUG
                Elf32_Dyn <3, <8049FF4h>> ; DT_PLTGOT
                Elf32_Dyn <2, <38h>>    ; DT_PLTRELSZ
                Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
                Elf32_Dyn <17h, <8048300h>> ; DT_JMPREL
                Elf32_Dyn <11h, <80482F8h>> ; DT_REL
                Elf32_Dyn <12h, <8>>    ; DT_RELSZ
                Elf32_Dyn <13h, <8>>    ; DT_RELENT
                Elf32_Dyn <6FFFFFFEh, <80482D8h>> ; DT_VERNEED
                Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
                Elf32_Dyn <6FFFFFF0h, <80482C6h>> ; DT_VERSYM
                Elf32_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got            segment dword public 'DATA' use32
                assume cs:_got
                ;org 8049FF0h
__gmon_start___ptr dd offset __gmon_start__ ; DATA XREF: _init_proc+10↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got_plt        segment dword public 'DATA' use32
                assume cs:_got_plt
                ;org 8049FF4h
_GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC ; DATA XREF: _init_proc+A↑o
                                        ; __libc_csu_init+9↑o ...
dword_8049FF8   dd 0                    ; DATA XREF: sub_8048370↑r
; int (*dword_8049FFC)(void)
dword_8049FFC   dd 0                    ; DATA XREF: sub_8048370+6↑r
off_804A000     dd offset read          ; DATA XREF: _read↑r
off_804A004     dd offset getegid       ; DATA XREF: _getegid↑r
off_804A008     dd offset system        ; DATA XREF: _system↑r
off_804A00C     dd offset __gmon_start__ ; DATA XREF: ___gmon_start__↑r
off_804A010     dd offset __libc_start_main
                                        ; DATA XREF: ___libc_start_main↑r
off_804A014     dd offset write         ; DATA XREF: _write↑r
off_804A018     dd offset setresgid     ; DATA XREF: _setresgid↑r
_got_plt        ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment dword public 'DATA' use32
                assume cs:_data
                ;org 804A01Ch
                public __data_start ; weak
__data_start    db    0                 ; Alternative name is '__data_start'
                                        ; data_start
                db    0
                db    0
                db    0
                public __dso_handle
__dso_handle    db    0
                db    0
                db    0
                db    0
                public not_used
not_used        dd offset aBinBash      ; "/bin/bash"
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment dword public 'BSS' use32
                assume cs:_bss
                ;org 804A028h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
completed_6159  db ?                    ; DATA XREF: __do_global_dtors_aux+7↑r
                                        ; __do_global_dtors_aux:loc_8048468↑w
                align 4
dtor_idx_6161   dd ?                    ; DATA XREF: __do_global_dtors_aux+10↑r
                                        ; __do_global_dtors_aux+33↑w ...
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use32
_end_0          label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
; ssize_t read(int fd, void *buf, size_t nbytes)
                extrn read:near         ; CODE XREF: _read↑j
                                        ; DATA XREF: .got.plt:off_804A000↑o
; __gid_t getegid(void)
                extrn getegid:near      ; CODE XREF: _getegid↑j
                                        ; DATA XREF: .got.plt:off_804A004↑o
; int system(const char *command)
                extrn system:near       ; CODE XREF: _system↑j
                                        ; DATA XREF: .got.plt:off_804A008↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: ___libc_start_main↑j
                                        ; DATA XREF: .got.plt:off_804A010↑o
; ssize_t write(int fd, const void *buf, size_t n)
                extrn write:near        ; CODE XREF: _write↑j
                                        ; DATA XREF: .got.plt:off_804A014↑o
                extrn setresgid:near    ; CODE XREF: _setresgid↑j
                                        ; DATA XREF: .got.plt:off_804A018↑o
                extrn __gmon_start__:near ; weak
                                        ; CODE XREF: ___gmon_start__↑j
                                        ; DATA XREF: .got:__gmon_start___ptr↑o ...

; ===========================================================================

; Segment type: Absolute symbols
; abs
                public _edata
_edata          = 804A028h
                public _end
_end            = 804A030h
                public __bss_start
__bss_start     = 804A028h


                end _start
